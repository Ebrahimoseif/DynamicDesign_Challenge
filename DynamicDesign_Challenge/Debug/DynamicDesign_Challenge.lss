
DynamicDesign_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000886  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800060  00800060  000008fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001298  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000add  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2d  00000000  00000000  0000280d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068f  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea6  00000000  00000000  00003f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004de9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	34 02       	muls	r19, r20
  56:	38 02       	muls	r19, r24
  58:	3d 02       	muls	r19, r29
  5a:	42 02       	muls	r20, r18
  5c:	47 02       	muls	r20, r23
  5e:	4c 02       	muls	r20, r28
  60:	51 02       	muls	r21, r17
  62:	56 02       	muls	r21, r22

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	ac 3b       	cpi	r26, 0xBC	; 188
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  84:	0c 94 41 04 	jmp	0x882	; 0x882 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <DIO_init>:
			*data = HIGH;
		}
		
	} /*end of else */
		return u8_status;
}
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_init+0x6>
  90:	55 c0       	rjmp	.+170    	; 0x13c <DIO_init+0xb0>
  92:	fc 01       	movw	r30, r24
  94:	20 81       	ld	r18, Z
  96:	24 30       	cpi	r18, 0x04	; 4
  98:	08 f0       	brcs	.+2      	; 0x9c <DIO_init+0x10>
  9a:	52 c0       	rjmp	.+164    	; 0x140 <DIO_init+0xb4>
  9c:	21 30       	cpi	r18, 0x01	; 1
  9e:	c1 f0       	breq	.+48     	; 0xd0 <DIO_init+0x44>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_init+0x20>
  a2:	22 30       	cpi	r18, 0x02	; 2
  a4:	39 f1       	breq	.+78     	; 0xf4 <DIO_init+0x68>
  a6:	23 30       	cpi	r18, 0x03	; 3
  a8:	b9 f1       	breq	.+110    	; 0x118 <DIO_init+0x8c>
  aa:	4c c0       	rjmp	.+152    	; 0x144 <DIO_init+0xb8>
  ac:	fc 01       	movw	r30, r24
  ae:	22 81       	ldd	r18, Z+2	; 0x02
  b0:	21 11       	cpse	r18, r1
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <DIO_init+0x36>
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 81       	ldd	r24, Z+1	; 0x01
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	08 95       	ret
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	fc 01       	movw	r30, r24
  c6:	81 81       	ldd	r24, Z+1	; 0x01
  c8:	82 2b       	or	r24, r18
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	fc 01       	movw	r30, r24
  d2:	22 81       	ldd	r18, Z+2	; 0x02
  d4:	21 11       	cpse	r18, r1
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <DIO_init+0x5a>
  d8:	27 b3       	in	r18, 0x17	; 23
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	fc 01       	movw	r30, r24
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	fc 01       	movw	r30, r24
  f6:	22 81       	ldd	r18, Z+2	; 0x02
  f8:	21 11       	cpse	r18, r1
  fa:	07 c0       	rjmp	.+14     	; 0x10a <DIO_init+0x7e>
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	84 bb       	out	0x14, r24	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	24 b3       	in	r18, 0x14	; 20
 10c:	fc 01       	movw	r30, r24
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	82 2b       	or	r24, r18
 112:	84 bb       	out	0x14, r24	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
 118:	fc 01       	movw	r30, r24
 11a:	22 81       	ldd	r18, Z+2	; 0x02
 11c:	21 11       	cpse	r18, r1
 11e:	07 c0       	rjmp	.+14     	; 0x12e <DIO_init+0xa2>
 120:	21 b3       	in	r18, 0x11	; 17
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	81 bb       	out	0x11, r24	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	fc 01       	movw	r30, r24
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	82 2b       	or	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret

00000148 <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
		
		if (!(GPIO >= GPIOA && GPIO <= GPIOD)  /* || !(u8_pins >=0 && u8_pins <=7) */)
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	e0 f4       	brcc	.+56     	; 0x184 <DIO_Toggle+0x3c>
			u8_status = E_NOK;
			
			}
			else{
	
	             switch(GPIO){
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	59 f0       	breq	.+22     	; 0x166 <DIO_Toggle+0x1e>
 150:	28 f0       	brcs	.+10     	; 0x15c <DIO_Toggle+0x14>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	69 f0       	breq	.+26     	; 0x170 <DIO_Toggle+0x28>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	81 f0       	breq	.+32     	; 0x17a <DIO_Toggle+0x32>
 15a:	16 c0       	rjmp	.+44     	; 0x188 <DIO_Toggle+0x40>
	             	
	             	case GPIOA:
	             			PORTA_DATA ^= u8_pins;
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	68 27       	eor	r22, r24
 160:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 162:	81 e0       	ldi	r24, 0x01	; 1
	
	             switch(GPIO){
	             	
	             	case GPIOA:
	             			PORTA_DATA ^= u8_pins;
	             			break;
 164:	08 95       	ret
	             	
	             	case GPIOB:
	             			PORTB_DATA ^= u8_pins;
 166:	88 b3       	in	r24, 0x18	; 24
 168:	68 27       	eor	r22, r24
 16a:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 16c:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTA_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOB:
	             			PORTB_DATA ^= u8_pins;
	             			break;
 16e:	08 95       	ret
	             	
	             	case GPIOC:
	             			PORTC_DATA ^= u8_pins;
 170:	85 b3       	in	r24, 0x15	; 21
 172:	68 27       	eor	r22, r24
 174:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 176:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTB_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOC:
	             			PORTC_DATA ^= u8_pins;
	             			break;
 178:	08 95       	ret
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
 17a:	82 b3       	in	r24, 0x12	; 18
 17c:	68 27       	eor	r22, r24
 17e:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 180:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTC_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
	             			break;
 182:	08 95       	ret
	
	ERROR_STATUS u8_status = E_OK;
		
		if (!(GPIO >= GPIOA && GPIO <= GPIOD)  /* || !(u8_pins >=0 && u8_pins <=7) */)
		{
			u8_status = E_NOK;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
	             			break;
	             	default: 
	             			u8_status = E_NOK;
 188:	80 e0       	ldi	r24, 0x00	; 0
	             }
			}/*end of else */
				 
	return u8_status;
}
 18a:	08 95       	ret

0000018c <led0_toggle>:
void led2_toggle(void){
	
	/*PORTD_DATA ^= HIGH;
	//_delay_ms(1000);
	*/
		DIO_Toggle(GPIOB, BIT7);
 18c:	60 e2       	ldi	r22, 0x20	; 32
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_Toggle>
 194:	08 95       	ret

00000196 <main>:

}


int main(void)
{	
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <main+0x6>
 19c:	1f 92       	push	r1
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	
	/* normal way */
	
	DIO_Cfg_s Leds ={
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	89 83       	std	Y+1, r24	; 0x01
 1a6:	80 ee       	ldi	r24, 0xE0	; 224
 1a8:	8a 83       	std	Y+2, r24	; 0x02
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	8b 83       	std	Y+3, r24	; 0x03
		GPIOB,
		BIT5 |BIT6 |BIT7,
		OUTPUT
	};
	
	DIO_init(&Leds);
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_init>
	
	TMU_Init();
 1b6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TMU_Init>
	
	/* 	TMU_Start(funcPtr, delay_ms , periodicity) */
	TMU_Start(led0_toggle, 1000, PERIODIC);
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	68 ee       	ldi	r22, 0xE8	; 232
 1be:	73 e0       	ldi	r23, 0x03	; 3
 1c0:	86 ec       	ldi	r24, 0xC6	; 198
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 07 03 	call	0x60e	; 0x60e <TMU_Start>
	
	
	/*TMU_Start(led1_toggle, 500, ONE_SHOT);
	TMU_Start(led2_toggle, 2000, PERIODIC);*/
	
	Sleep_SetMode(IDLE_MODE);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 ed 00 	call	0x1da	; 0x1da <Sleep_SetMode>

	/* enable global interrupts */
	sei();
 1ce:	78 94       	sei
	
	while (1)
	{
		//fun();
		
		TMU_Dispatcher();
 1d0:	0e 94 b0 03 	call	0x760	; 0x760 <TMU_Dispatcher>
		
		Sleep_Enable();
 1d4:	0e 94 13 01 	call	0x226	; 0x226 <Sleep_Enable>
 1d8:	fb cf       	rjmp	.-10     	; 0x1d0 <main+0x3a>

000001da <Sleep_SetMode>:
{
	
	/* 	  Note: STANDBY and EXT_STANDBY sleep modes are only available with
	 	  	external crystal/resonator fuse selection */
	
  switch (sleep_mode){
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	a1 f0       	breq	.+40     	; 0x206 <Sleep_SetMode+0x2c>
 1de:	28 f4       	brcc	.+10     	; 0x1ea <Sleep_SetMode+0x10>
 1e0:	88 23       	and	r24, r24
 1e2:	49 f0       	breq	.+18     	; 0x1f6 <Sleep_SetMode+0x1c>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	59 f0       	breq	.+22     	; 0x1fe <Sleep_SetMode+0x24>
 1e8:	08 95       	ret
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	a1 f0       	breq	.+40     	; 0x216 <Sleep_SetMode+0x3c>
 1ee:	78 f0       	brcs	.+30     	; 0x20e <Sleep_SetMode+0x34>
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	a9 f0       	breq	.+42     	; 0x21e <Sleep_SetMode+0x44>
 1f4:	08 95       	ret
	  
    case (IDLE_MODE):
  
      MCUCR |= IDLE_MASK;
 1f6:	85 b7       	in	r24, 0x35	; 53
 1f8:	8f 68       	ori	r24, 0x8F	; 143
 1fa:	85 bf       	out	0x35, r24	; 53
      break;
 1fc:	08 95       	ret
	  
    case (ADC_NOISE_REDUC_MODE):
      
      MCUCR |= ADC_NOISE_REDUC_MASK;
 1fe:	85 b7       	in	r24, 0x35	; 53
 200:	8f 69       	ori	r24, 0x9F	; 159
 202:	85 bf       	out	0x35, r24	; 53
      break;
 204:	08 95       	ret
	  
    case (POWER_DOWN_MODE):
    
      MCUCR |= POWER_DOWN_MASK;
 206:	85 b7       	in	r24, 0x35	; 53
 208:	8f 6a       	ori	r24, 0xAF	; 175
 20a:	85 bf       	out	0x35, r24	; 53
      break;
 20c:	08 95       	ret
		 
    case (POWER_SAVE_MODE):

      MCUCR |= POWER_SAVE_MASK;
 20e:	85 b7       	in	r24, 0x35	; 53
 210:	8f 6b       	ori	r24, 0xBF	; 191
 212:	85 bf       	out	0x35, r24	; 53
	  break;
 214:	08 95       	ret
	  
    case (STANDBY_MODE):

      MCUCR |= STANDBY_MASK;
 216:	85 b7       	in	r24, 0x35	; 53
 218:	8f 6e       	ori	r24, 0xEF	; 239
 21a:	85 bf       	out	0x35, r24	; 53
      break;
 21c:	08 95       	ret

    case (EXT_STANDBY_MODE):

      MCUCR |= EXT_STANDBY_MASK;
 21e:	85 b7       	in	r24, 0x35	; 53
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	85 bf       	out	0x35, r24	; 53
 224:	08 95       	ret

00000226 <Sleep_Enable>:
	/* set SE BIT */
	/*
	PORTA_DIR = 0XFF;
	PORTA_DATA ^= 0XFF;*/
	
	MCUCR |=  ENABLE_SLEEP_MASK;
 226:	85 b7       	in	r24, 0x35	; 53
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	85 bf       	out	0x35, r24	; 53
	 asm("SLEEP");	
 22c:	88 95       	sleep
 22e:	08 95       	ret

00000230 <Sleep_Disable>:
* @return: void
*/
void Sleep_Disable(void){
	
	/* CLEAR SE BIT */
	MCUCR &= ~ ENABLE_SLEEP_MASK;
 230:	85 b7       	in	r24, 0x35	; 53
 232:	8f 77       	andi	r24, 0x7F	; 127
 234:	85 bf       	out	0x35, r24	; 53
 236:	08 95       	ret

00000238 <Timer_Init>:
	         			u8_status = E_NOK;
	         }
		}/*end of else */
		
	return u8_status;
}
 238:	fc 01       	movw	r30, r24
 23a:	89 2b       	or	r24, r25
 23c:	09 f4       	brne	.+2      	; 0x240 <Timer_Init+0x8>
 23e:	8c c0       	rjmp	.+280    	; 0x358 <Timer_Init+0x120>
 240:	80 81       	ld	r24, Z
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	a9 f1       	breq	.+106    	; 0x2b0 <Timer_Init+0x78>
 246:	20 f0       	brcs	.+8      	; 0x250 <Timer_Init+0x18>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	09 f4       	brne	.+2      	; 0x24e <Timer_Init+0x16>
 24c:	5b c0       	rjmp	.+182    	; 0x304 <Timer_Init+0xcc>
 24e:	86 c0       	rjmp	.+268    	; 0x35c <Timer_Init+0x124>
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	21 f0       	breq	.+8      	; 0x25e <Timer_Init+0x26>
 256:	68 f0       	brcs	.+26     	; 0x272 <Timer_Init+0x3a>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	31 f0       	breq	.+12     	; 0x268 <Timer_Init+0x30>
 25c:	0f c0       	rjmp	.+30     	; 0x27c <Timer_Init+0x44>
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0b c0       	rjmp	.+22     	; 0x27e <Timer_Init+0x46>
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	06 c0       	rjmp	.+12     	; 0x27e <Timer_Init+0x46>
 272:	83 81       	ldd	r24, Z+3	; 0x03
 274:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	01 c0       	rjmp	.+2      	; 0x27e <Timer_Init+0x46>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	92 81       	ldd	r25, Z+2	; 0x02
 280:	99 23       	and	r25, r25
 282:	19 f0       	breq	.+6      	; 0x28a <Timer_Init+0x52>
 284:	91 30       	cpi	r25, 0x01	; 1
 286:	29 f0       	breq	.+10     	; 0x292 <Timer_Init+0x5a>
 288:	08 c0       	rjmp	.+16     	; 0x29a <Timer_Init+0x62>
 28a:	99 b7       	in	r25, 0x39	; 57
 28c:	9e 7f       	andi	r25, 0xFE	; 254
 28e:	99 bf       	out	0x39, r25	; 57
 290:	05 c0       	rjmp	.+10     	; 0x29c <Timer_Init+0x64>
 292:	99 b7       	in	r25, 0x39	; 57
 294:	91 60       	ori	r25, 0x01	; 1
 296:	99 bf       	out	0x39, r25	; 57
 298:	01 c0       	rjmp	.+2      	; 0x29c <Timer_Init+0x64>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	24 81       	ldd	r18, Z+4	; 0x04
 29e:	35 81       	ldd	r19, Z+5	; 0x05
 2a0:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
 2a4:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <gu8_Timer0initFlag>
 2ae:	08 95       	ret
 2b0:	81 81       	ldd	r24, Z+1	; 0x01
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	21 f0       	breq	.+8      	; 0x2be <Timer_Init+0x86>
 2b6:	68 f0       	brcs	.+26     	; 0x2d2 <Timer_Init+0x9a>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <Timer_Init+0x90>
 2bc:	0f c0       	rjmp	.+30     	; 0x2dc <Timer_Init+0xa4>
 2be:	87 e0       	ldi	r24, 0x07	; 7
 2c0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0b c0       	rjmp	.+22     	; 0x2de <Timer_Init+0xa6>
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <Timer_Init+0xa6>
 2d2:	83 81       	ldd	r24, Z+3	; 0x03
 2d4:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	01 c0       	rjmp	.+2      	; 0x2de <Timer_Init+0xa6>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	92 81       	ldd	r25, Z+2	; 0x02
 2e0:	99 23       	and	r25, r25
 2e2:	19 f0       	breq	.+6      	; 0x2ea <Timer_Init+0xb2>
 2e4:	91 30       	cpi	r25, 0x01	; 1
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <Timer_Init+0xba>
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <Timer_Init+0xc2>
 2ea:	99 b7       	in	r25, 0x39	; 57
 2ec:	9b 7f       	andi	r25, 0xFB	; 251
 2ee:	99 bf       	out	0x39, r25	; 57
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <Timer_Init+0xc4>
 2f2:	99 b7       	in	r25, 0x39	; 57
 2f4:	94 60       	ori	r25, 0x04	; 4
 2f6:	99 bf       	out	0x39, r25	; 57
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <Timer_Init+0xc4>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <gu8_Timer1initFlag>
 302:	08 95       	ret
 304:	81 81       	ldd	r24, Z+1	; 0x01
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	21 f0       	breq	.+8      	; 0x312 <Timer_Init+0xda>
 30a:	68 f0       	brcs	.+26     	; 0x326 <Timer_Init+0xee>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	31 f0       	breq	.+12     	; 0x31c <Timer_Init+0xe4>
 310:	0f c0       	rjmp	.+30     	; 0x330 <Timer_Init+0xf8>
 312:	87 e0       	ldi	r24, 0x07	; 7
 314:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0b c0       	rjmp	.+22     	; 0x332 <Timer_Init+0xfa>
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	06 c0       	rjmp	.+12     	; 0x332 <Timer_Init+0xfa>
 326:	83 81       	ldd	r24, Z+3	; 0x03
 328:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	01 c0       	rjmp	.+2      	; 0x332 <Timer_Init+0xfa>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	92 81       	ldd	r25, Z+2	; 0x02
 334:	99 23       	and	r25, r25
 336:	19 f0       	breq	.+6      	; 0x33e <Timer_Init+0x106>
 338:	91 30       	cpi	r25, 0x01	; 1
 33a:	29 f0       	breq	.+10     	; 0x346 <Timer_Init+0x10e>
 33c:	08 c0       	rjmp	.+16     	; 0x34e <Timer_Init+0x116>
 33e:	99 b7       	in	r25, 0x39	; 57
 340:	9f 7b       	andi	r25, 0xBF	; 191
 342:	99 bf       	out	0x39, r25	; 57
 344:	05 c0       	rjmp	.+10     	; 0x350 <Timer_Init+0x118>
 346:	99 b7       	in	r25, 0x39	; 57
 348:	90 64       	ori	r25, 0x40	; 64
 34a:	99 bf       	out	0x39, r25	; 57
 34c:	01 c0       	rjmp	.+2      	; 0x350 <Timer_Init+0x118>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu8_Timer2initFlag>
 356:	08 95       	ret
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret

00000360 <Timer_Start>:
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	d9 f1       	breq	.+118    	; 0x3da <Timer_Start+0x7a>
 364:	20 f0       	brcs	.+8      	; 0x36e <Timer_Start+0xe>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	09 f4       	brne	.+2      	; 0x36c <Timer_Start+0xc>
 36a:	6e c0       	rjmp	.+220    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 36c:	a7 c0       	rjmp	.+334    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 36e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0initFlag>
 372:	88 23       	and	r24, r24
 374:	09 f4       	brne	.+2      	; 0x378 <Timer_Start+0x18>
 376:	a4 c0       	rjmp	.+328    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 378:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	b1 f0       	breq	.+44     	; 0x3ac <Timer_Start+0x4c>
 380:	28 f4       	brcc	.+10     	; 0x38c <Timer_Start+0x2c>
 382:	88 23       	and	r24, r24
 384:	51 f0       	breq	.+20     	; 0x39a <Timer_Start+0x3a>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	61 f0       	breq	.+24     	; 0x3a2 <Timer_Start+0x42>
 38a:	24 c0       	rjmp	.+72     	; 0x3d4 <Timer_Start+0x74>
 38c:	86 30       	cpi	r24, 0x06	; 6
 38e:	c1 f0       	breq	.+48     	; 0x3c0 <Timer_Start+0x60>
 390:	87 30       	cpi	r24, 0x07	; 7
 392:	d9 f0       	breq	.+54     	; 0x3ca <Timer_Start+0x6a>
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	f1 f4       	brne	.+60     	; 0x3d4 <Timer_Start+0x74>
 398:	0e c0       	rjmp	.+28     	; 0x3b6 <Timer_Start+0x56>
 39a:	83 b7       	in	r24, 0x33	; 51
 39c:	83 bf       	out	0x33, r24	; 51
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	1a c0       	rjmp	.+52     	; 0x3d6 <Timer_Start+0x76>
 3a2:	83 b7       	in	r24, 0x33	; 51
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	83 bf       	out	0x33, r24	; 51
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	15 c0       	rjmp	.+42     	; 0x3d6 <Timer_Start+0x76>
 3ac:	83 b7       	in	r24, 0x33	; 51
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	83 bf       	out	0x33, r24	; 51
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	10 c0       	rjmp	.+32     	; 0x3d6 <Timer_Start+0x76>
 3b6:	83 b7       	in	r24, 0x33	; 51
 3b8:	83 60       	ori	r24, 0x03	; 3
 3ba:	83 bf       	out	0x33, r24	; 51
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0b c0       	rjmp	.+22     	; 0x3d6 <Timer_Start+0x76>
 3c0:	83 b7       	in	r24, 0x33	; 51
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	83 bf       	out	0x33, r24	; 51
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <Timer_Start+0x76>
 3ca:	83 b7       	in	r24, 0x33	; 51
 3cc:	85 60       	ori	r24, 0x05	; 5
 3ce:	83 bf       	out	0x33, r24	; 51
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <Timer_Start+0x76>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	62 bf       	out	0x32, r22	; 50
 3d8:	08 95       	ret
 3da:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1initFlag>
 3de:	88 23       	and	r24, r24
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <Timer_Start+0x84>
 3e2:	70 c0       	rjmp	.+224    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 3e4:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	b1 f0       	breq	.+44     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3ec:	28 f4       	brcc	.+10     	; 0x3f8 <Timer_Start+0x98>
 3ee:	88 23       	and	r24, r24
 3f0:	51 f0       	breq	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	61 f0       	breq	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f6:	24 c0       	rjmp	.+72     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3f8:	86 30       	cpi	r24, 0x06	; 6
 3fa:	c1 f0       	breq	.+48     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3fc:	87 30       	cpi	r24, 0x07	; 7
 3fe:	d9 f0       	breq	.+54     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 400:	84 30       	cpi	r24, 0x04	; 4
 402:	f1 f4       	brne	.+60     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 404:	0e c0       	rjmp	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 406:	8e b5       	in	r24, 0x2e	; 46
 408:	8e bd       	out	0x2e, r24	; 46
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	1a c0       	rjmp	.+52     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 40e:	8e b5       	in	r24, 0x2e	; 46
 410:	81 60       	ori	r24, 0x01	; 1
 412:	8e bd       	out	0x2e, r24	; 46
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	15 c0       	rjmp	.+42     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 418:	8e b5       	in	r24, 0x2e	; 46
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	8e bd       	out	0x2e, r24	; 46
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	10 c0       	rjmp	.+32     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 422:	8e b5       	in	r24, 0x2e	; 46
 424:	83 60       	ori	r24, 0x03	; 3
 426:	8e bd       	out	0x2e, r24	; 46
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0b c0       	rjmp	.+22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 42c:	8e b5       	in	r24, 0x2e	; 46
 42e:	84 60       	ori	r24, 0x04	; 4
 430:	8e bd       	out	0x2e, r24	; 46
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	06 c0       	rjmp	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 436:	8e b5       	in	r24, 0x2e	; 46
 438:	85 60       	ori	r24, 0x05	; 5
 43a:	8e bd       	out	0x2e, r24	; 46
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	7d bd       	out	0x2d, r23	; 45
 444:	6c bd       	out	0x2c, r22	; 44
 446:	08 95       	ret
 448:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2initFlag>
 44c:	88 23       	and	r24, r24
 44e:	e1 f1       	breq	.+120    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 450:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 454:	8e 2f       	mov	r24, r30
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	88 30       	cpi	r24, 0x08	; 8
 45a:	91 05       	cpc	r25, r1
 45c:	60 f5       	brcc	.+88     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 45e:	fc 01       	movw	r30, r24
 460:	e6 5d       	subi	r30, 0xD6	; 214
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	0c 94 3b 04 	jmp	0x876	; 0x876 <__tablejump2__>
 468:	85 b5       	in	r24, 0x25	; 37
 46a:	85 bd       	out	0x25, r24	; 37
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	24 c0       	rjmp	.+72     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 470:	85 b5       	in	r24, 0x25	; 37
 472:	81 60       	ori	r24, 0x01	; 1
 474:	85 bd       	out	0x25, r24	; 37
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	1f c0       	rjmp	.+62     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 47a:	85 b5       	in	r24, 0x25	; 37
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	85 bd       	out	0x25, r24	; 37
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	1a c0       	rjmp	.+52     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 484:	85 b5       	in	r24, 0x25	; 37
 486:	83 60       	ori	r24, 0x03	; 3
 488:	85 bd       	out	0x25, r24	; 37
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	15 c0       	rjmp	.+42     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	84 60       	ori	r24, 0x04	; 4
 492:	85 bd       	out	0x25, r24	; 37
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	10 c0       	rjmp	.+32     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 498:	85 b5       	in	r24, 0x25	; 37
 49a:	85 60       	ori	r24, 0x05	; 5
 49c:	85 bd       	out	0x25, r24	; 37
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a2:	85 b5       	in	r24, 0x25	; 37
 4a4:	86 60       	ori	r24, 0x06	; 6
 4a6:	85 bd       	out	0x25, r24	; 37
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4ac:	85 b5       	in	r24, 0x25	; 37
 4ae:	87 60       	ori	r24, 0x07	; 7
 4b0:	85 bd       	out	0x25, r24	; 37
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	64 bd       	out	0x24, r22	; 36
 4ba:	08 95       	ret
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret

000004cc <Timer_Stop>:
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	89 f0       	breq	.+34     	; 0x4f2 <Timer_Stop+0x26>
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <Timer_Stop+0xc>
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	d9 f0       	breq	.+54     	; 0x50c <Timer_Stop+0x40>
 4d6:	27 c0       	rjmp	.+78     	; 0x526 <Timer_Stop+0x5a>
 4d8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0initFlag>
 4dc:	88 23       	and	r24, r24
 4de:	29 f1       	breq	.+74     	; 0x52a <Timer_Stop+0x5e>
 4e0:	83 b7       	in	r24, 0x33	; 51
 4e2:	13 be       	out	0x33, r1	; 51
 4e4:	88 b7       	in	r24, 0x38	; 56
 4e6:	81 60       	ori	r24, 0x01	; 1
 4e8:	88 bf       	out	0x38, r24	; 56
 4ea:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <gu8_Timer0initFlag>
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1initFlag>
 4f6:	88 23       	and	r24, r24
 4f8:	d1 f0       	breq	.+52     	; 0x52e <Timer_Stop+0x62>
 4fa:	8e b5       	in	r24, 0x2e	; 46
 4fc:	1e bc       	out	0x2e, r1	; 46
 4fe:	88 b7       	in	r24, 0x38	; 56
 500:	84 60       	ori	r24, 0x04	; 4
 502:	88 bf       	out	0x38, r24	; 56
 504:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <gu8_Timer1initFlag>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	08 95       	ret
 50c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2initFlag>
 510:	88 23       	and	r24, r24
 512:	79 f0       	breq	.+30     	; 0x532 <Timer_Stop+0x66>
 514:	85 b5       	in	r24, 0x25	; 37
 516:	15 bc       	out	0x25, r1	; 37
 518:	88 b7       	in	r24, 0x38	; 56
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	88 bf       	out	0x38, r24	; 56
 51e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <gu8_Timer2initFlag>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	08 95       	ret
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	08 95       	ret

00000536 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
	/* Increment overflow counter */
	Timer_OVF_CBK_Ptr[0]();
 558:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 55c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 560:	09 95       	icall
	//PORTC_DATA ^= HIGH;
}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <TMU_TimerOvf_CBK>:
			gsu8_TMUInitStatus = NOT_INITIALIZED;
			
		}
	
	return u8_status;
}
 584:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gu8_OvfCounter>
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gu8_OvfCounter>
 58e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gu8_OvfCounter>
 592:	8a 30       	cpi	r24, 0x0A	; 10
 594:	29 f4       	brne	.+10     	; 0x5a0 <TMU_TimerOvf_CBK+0x1c>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_TMU_TimerOvf_Flag>
 59c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <gu8_OvfCounter>
 5a0:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <gu16_PRELOAD>
 5a4:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <gu16_PRELOAD+0x1>
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	0e 94 b0 01 	call	0x360	; 0x360 <Timer_Start>
 5ae:	0e 94 18 01 	call	0x230	; 0x230 <Sleep_Disable>
 5b2:	08 95       	ret

000005b4 <TMU_Init>:
 5b4:	cf 93       	push	r28
 5b6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gsu8_TMUInitStatus>
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	29 f1       	breq	.+74     	; 0x608 <TMU_Init+0x54>
 5be:	ef e6       	ldi	r30, 0x6F	; 111
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	85 eb       	ldi	r24, 0xB5	; 181
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	11 82       	std	Z+1, r1	; 0x01
 5c8:	10 82       	st	Z, r1
 5ca:	13 82       	std	Z+3, r1	; 0x03
 5cc:	12 82       	std	Z+2, r1	; 0x02
 5ce:	16 82       	std	Z+6, r1	; 0x06
 5d0:	37 96       	adiw	r30, 0x07	; 7
 5d2:	e8 17       	cp	r30, r24
 5d4:	f9 07       	cpc	r31, r25
 5d6:	b9 f7       	brne	.-18     	; 0x5c6 <TMU_Init+0x12>
 5d8:	e6 eb       	ldi	r30, 0xB6	; 182
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	10 82       	st	Z, r1
 5de:	84 e0       	ldi	r24, 0x04	; 4
 5e0:	83 83       	std	Z+3, r24	; 0x03
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <gu16_PRELOAD+0x1>
 5ea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gu16_PRELOAD>
 5ee:	11 82       	std	Z+1, r1	; 0x01
 5f0:	c1 e0       	ldi	r28, 0x01	; 1
 5f2:	c2 83       	std	Z+2, r28	; 0x02
 5f4:	82 ec       	ldi	r24, 0xC2	; 194
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	95 83       	std	Z+5, r25	; 0x05
 5fa:	84 83       	std	Z+4, r24	; 0x04
 5fc:	cf 01       	movw	r24, r30
 5fe:	0e 94 1c 01 	call	0x238	; 0x238 <Timer_Init>
 602:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <gsu8_TMUInitStatus>
 606:	01 c0       	rjmp	.+2      	; 0x60a <TMU_Init+0x56>
 608:	8e ef       	ldi	r24, 0xFE	; 254
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <TMU_Start>:
* @return: ERROR_STATUS status code with error code if one occurred
*/
ERROR_STATUS TMU_Start(gptrTMU_Function_t gptrTMU_Function,
					   u16_Delay_t u16_Delay,
					   uint8_t u8_Periodicity)
{
 60e:	9c 01       	movw	r18, r24
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
		/* check the module */
	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
 610:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gsu8_TMUInitStatus>
 614:	99 23       	and	r25, r25
 616:	19 f1       	breq	.+70     	; 0x65e <TMU_Start+0x50>
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
	}
	else
	{
			/* check the function pointer  */	
		if(NULL == gptrTMU_Function)
 618:	21 15       	cp	r18, r1
 61a:	31 05       	cpc	r19, r1
 61c:	11 f1       	breq	.+68     	; 0x662 <TMU_Start+0x54>
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
		}
		else
		{
				/* check the buffer is full or not */
			if (gu8_Index == MAX_TASK_COUNT)
 61e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 622:	8a 30       	cpi	r24, 0x0A	; 10
 624:	01 f1       	breq	.+64     	; 0x666 <TMU_Start+0x58>
			{
				u8_status = TMU_ERROR_BASE + ERROR_FULL_BUFFER;
			}
			else{
			/* add the task to the buffer */
			gastrTMU_Buff[gu8_Index].gptrTMU_Function		= gptrTMU_Function;
 626:	97 e0       	ldi	r25, 0x07	; 7
 628:	89 9f       	mul	r24, r25
 62a:	f0 01       	movw	r30, r0
 62c:	11 24       	eor	r1, r1
 62e:	e1 59       	subi	r30, 0x91	; 145
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	31 83       	std	Z+1, r19	; 0x01
 634:	20 83       	st	Z, r18
			gastrTMU_Buff[gu8_Index].u16_Delay				= u16_Delay;
 636:	73 83       	std	Z+3, r23	; 0x03
 638:	62 83       	std	Z+2, r22	; 0x02
			gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count  = ZERO;
 63a:	15 82       	std	Z+5, r1	; 0x05
 63c:	14 82       	std	Z+4, r1	; 0x04
			gastrTMU_Buff[gu8_Index].u8_Periodicity         = u8_Periodicity;
 63e:	46 83       	std	Z+6, r20	; 0x06

			/*start the timer for the first time */
			
			if(gu8_Index == ZERO)
 640:	81 11       	cpse	r24, r1
 642:	06 c0       	rjmp	.+12     	; 0x650 <TMU_Start+0x42>
			{
				#if  TMU_TIMER_CH0
								
				Timer_Start(TIMER_CH0, gu16_PRELOAD);
 644:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <gu16_PRELOAD>
 648:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <gu16_PRELOAD+0x1>
 64c:	0e 94 b0 01 	call	0x360	; 0x360 <Timer_Start>
				#elif  TMU_TIMER_CH2
				Timer_Start(TIMER_CH2, gu16_PRELOAD);
				#endif
			}

			gu8_Index++;
 650:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 654:	8f 5f       	subi	r24, 0xFF	; 255
 656:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_Index>
{
	
	/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
		
		/* check the module */
	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	08 95       	ret
	else
	{
			/* check the function pointer  */	
		if(NULL == gptrTMU_Function)
		{
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 662:	8d ef       	ldi	r24, 0xFD	; 253
 664:	08 95       	ret
		else
		{
				/* check the buffer is full or not */
			if (gu8_Index == MAX_TASK_COUNT)
			{
				u8_status = TMU_ERROR_BASE + ERROR_FULL_BUFFER;
 666:	8b ef       	ldi	r24, 0xFB	; 251
		} /* end of else */
	}
  } /* end of outer else */

	return u8_status;
}
 668:	08 95       	ret

0000066a <TMU_Stop>:
* @param: gptrTMU_Function: pointer to callback function
* @return: ERROR_STATUS status code with error code if one occurred
*/
 
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
		/* check the module */

	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
 676:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <gsu8_TMUInitStatus>
 67a:	22 23       	and	r18, r18
 67c:	09 f4       	brne	.+2      	; 0x680 <TMU_Stop+0x16>
 67e:	63 c0       	rjmp	.+198    	; 0x746 <TMU_Stop+0xdc>
	else
	{
		uint8_t u8_Counter;
		/* check the buffer is empty or not */

		if(gu8_Index == ZERO)
 680:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <gu8_Index>
 684:	aa 23       	and	r26, r26
 686:	09 f4       	brne	.+2      	; 0x68a <TMU_Stop+0x20>
 688:	59 c0       	rjmp	.+178    	; 0x73c <TMU_Stop+0xd2>
		}
		else
		{
			/* check the function pointer */

			if (NULL == gptrTMU_Function)
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	09 f4       	brne	.+2      	; 0x690 <TMU_Stop+0x26>
 68e:	5d c0       	rjmp	.+186    	; 0x74a <TMU_Stop+0xe0>
 690:	ef e6       	ldi	r30, 0x6F	; 111
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	45 eb       	ldi	r20, 0xB5	; 181
 696:	50 e0       	ldi	r21, 0x00	; 0
			else
			{
					/* loop to find the task  */
			for(u8_Counter = ZERO; u8_Counter < MAX_TASK_COUNT; u8_Counter++)
				{
					if(gastrTMU_Buff[u8_Counter].gptrTMU_Function == gptrTMU_Function)
 698:	20 81       	ld	r18, Z
 69a:	31 81       	ldd	r19, Z+1	; 0x01
 69c:	82 17       	cp	r24, r18
 69e:	93 07       	cpc	r25, r19
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <TMU_Stop+0x3a>
 6a2:	41 c0       	rjmp	.+130    	; 0x726 <TMU_Stop+0xbc>
					{
					/* Check if one task exist or full */
					if((gu8_Index == 1) || (gu8_Index == MAX_TASK_COUNT))
 6a4:	a1 30       	cpi	r26, 0x01	; 1
 6a6:	11 f0       	breq	.+4      	; 0x6ac <TMU_Stop+0x42>
 6a8:	aa 30       	cpi	r26, 0x0A	; 10
 6aa:	79 f4       	brne	.+30     	; 0x6ca <TMU_Stop+0x60>
	Sleep_Disable();
}

static void TMU_ClearTask(uint8_t u8_index){
	
	  gastrTMU_Buff[gu8_Index].gptrTMU_Function			= NULL;
 6ac:	27 e0       	ldi	r18, 0x07	; 7
 6ae:	a2 9f       	mul	r26, r18
 6b0:	e0 01       	movw	r28, r0
 6b2:	11 24       	eor	r1, r1
 6b4:	c1 59       	subi	r28, 0x91	; 145
 6b6:	df 4f       	sbci	r29, 0xFF	; 255
 6b8:	19 82       	std	Y+1, r1	; 0x01
 6ba:	18 82       	st	Y, r1
	  gastrTMU_Buff[gu8_Index].u16_Delay				= ZERO;
 6bc:	1b 82       	std	Y+3, r1	; 0x03
 6be:	1a 82       	std	Y+2, r1	; 0x02
	  gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count    = ZERO;
 6c0:	1d 82       	std	Y+5, r1	; 0x05
 6c2:	1c 82       	std	Y+4, r1	; 0x04
	  gastrTMU_Buff[gu8_Index].u8_Periodicity			= ZERO;
 6c4:	1e 82       	std	Y+6, r1	; 0x06
					{
					/* Check if one task exist or full */
					if((gu8_Index == 1) || (gu8_Index == MAX_TASK_COUNT))
						{
						TMU_ClearTask(gu8_Index);
						gu8_Index--;
 6c6:	a1 50       	subi	r26, 0x01	; 1
 6c8:	2e c0       	rjmp	.+92     	; 0x726 <TMU_Stop+0xbc>
						}
						else
						{
						TMU_ShiftTasks(u8_Counter , (gu8_Index-1));
 6ca:	6f ef       	ldi	r22, 0xFF	; 255
 6cc:	6a 0f       	add	r22, r26
}

static void TMU_ShiftTasks(uint8_t newIndex, uint8_t oldIndex){
	
	
	  gastrTMU_Buff[newIndex].gptrTMU_Function		= gastrTMU_Buff[oldIndex].gptrTMU_Function;
 6ce:	77 e0       	ldi	r23, 0x07	; 7
 6d0:	67 9f       	mul	r22, r23
 6d2:	90 01       	movw	r18, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	21 59       	subi	r18, 0x91	; 145
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	e9 01       	movw	r28, r18
 6dc:	08 81       	ld	r16, Y
 6de:	19 81       	ldd	r17, Y+1	; 0x01
 6e0:	11 83       	std	Z+1, r17	; 0x01
 6e2:	00 83       	st	Z, r16
	  gastrTMU_Buff[newIndex].u16_Delay				= gastrTMU_Buff[oldIndex].u16_Delay;
 6e4:	e9 01       	movw	r28, r18
 6e6:	0a 81       	ldd	r16, Y+2	; 0x02
 6e8:	1b 81       	ldd	r17, Y+3	; 0x03
 6ea:	13 83       	std	Z+3, r17	; 0x03
 6ec:	02 83       	std	Z+2, r16	; 0x02
	  gastrTMU_Buff[newIndex].u16_MilliSecond_Count = gastrTMU_Buff[oldIndex].u16_MilliSecond_Count;
 6ee:	e9 01       	movw	r28, r18
 6f0:	0c 81       	ldd	r16, Y+4	; 0x04
 6f2:	1d 81       	ldd	r17, Y+5	; 0x05
 6f4:	15 83       	std	Z+5, r17	; 0x05
 6f6:	04 83       	std	Z+4, r16	; 0x04
	  gastrTMU_Buff[newIndex].u8_Periodicity		= gastrTMU_Buff[oldIndex].u8_Periodicity;
 6f8:	e9 01       	movw	r28, r18
 6fa:	2e 81       	ldd	r18, Y+6	; 0x06
 6fc:	26 83       	std	Z+6, r18	; 0x06
	Sleep_Disable();
}

static void TMU_ClearTask(uint8_t u8_index){
	
	  gastrTMU_Buff[gu8_Index].gptrTMU_Function			= NULL;
 6fe:	d7 e0       	ldi	r29, 0x07	; 7
 700:	ad 9f       	mul	r26, r29
 702:	d0 01       	movw	r26, r0
 704:	11 24       	eor	r1, r1
 706:	a1 59       	subi	r26, 0x91	; 145
 708:	bf 4f       	sbci	r27, 0xFF	; 255
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	1c 92       	st	X, r1
 70e:	1e 92       	st	-X, r1
	  gastrTMU_Buff[gu8_Index].u16_Delay				= ZERO;
 710:	13 96       	adiw	r26, 0x03	; 3
 712:	1c 92       	st	X, r1
 714:	1e 92       	st	-X, r1
 716:	12 97       	sbiw	r26, 0x02	; 2
	  gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count    = ZERO;
 718:	15 96       	adiw	r26, 0x05	; 5
 71a:	1c 92       	st	X, r1
 71c:	1e 92       	st	-X, r1
 71e:	14 97       	sbiw	r26, 0x04	; 4
	  gastrTMU_Buff[gu8_Index].u8_Periodicity			= ZERO;
 720:	16 96       	adiw	r26, 0x06	; 6
 722:	1c 92       	st	X, r1
						else
						{
						TMU_ShiftTasks(u8_Counter , (gu8_Index-1));

						TMU_ClearTask((gu8_Index-1));
						gu8_Index--;
 724:	a6 2f       	mov	r26, r22
 726:	37 96       	adiw	r30, 0x07	; 7
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
			}
			else
			{
					/* loop to find the task  */
			for(u8_Counter = ZERO; u8_Counter < MAX_TASK_COUNT; u8_Counter++)
 728:	e4 17       	cp	r30, r20
 72a:	f5 07       	cpc	r31, r21
 72c:	09 f0       	breq	.+2      	; 0x730 <TMU_Stop+0xc6>
 72e:	b4 cf       	rjmp	.-152    	; 0x698 <TMU_Stop+0x2e>
 730:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <gu8_Index>
		  }
		}

		/*  if buffer is empty so stop the timer */
		
		if(gu8_Index == ZERO)
 734:	a1 11       	cpse	r26, r1
 736:	0b c0       	rjmp	.+22     	; 0x74e <TMU_Stop+0xe4>
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 738:	c0 e0       	ldi	r28, 0x00	; 0
 73a:	01 c0       	rjmp	.+2      	; 0x73e <TMU_Stop+0xd4>
		uint8_t u8_Counter;
		/* check the buffer is empty or not */

		if(gu8_Index == ZERO)
		{
			u8_status = TMU_ERROR_BASE + ERROR_EMPTY_BUFFER;
 73c:	cc ef       	ldi	r28, 0xFC	; 252
		/*  if buffer is empty so stop the timer */
		
		if(gu8_Index == ZERO)
		{
			#if  TMU_TIMER_CH0
			Timer_Stop(TIMER_CH0);
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	0e 94 66 02 	call	0x4cc	; 0x4cc <Timer_Stop>
 744:	05 c0       	rjmp	.+10     	; 0x750 <TMU_Stop+0xe6>
		
		/* check the module */

	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
 746:	cf ef       	ldi	r28, 0xFF	; 255
 748:	03 c0       	rjmp	.+6      	; 0x750 <TMU_Stop+0xe6>
		{
			/* check the function pointer */

			if (NULL == gptrTMU_Function)
			{
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 74a:	cd ef       	ldi	r28, 0xFD	; 253
 74c:	01 c0       	rjmp	.+2      	; 0x750 <TMU_Stop+0xe6>
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 74e:	c0 e0       	ldi	r28, 0x00	; 0
			Timer_Stop(TIMER_CH2);
			#endif
		}
	}
	return u8_status;
}
 750:	8c 2f       	mov	r24, r28
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	ff 90       	pop	r15
 75c:	ef 90       	pop	r14
 75e:	08 95       	ret

00000760 <TMU_Dispatcher>:
* Input : void
* Output: None
* @return: ERROR_STATUS status code with error code if one occurred
*/
ERROR_STATUS TMU_Dispatcher(void)
{
 760:	cf 92       	push	r12
 762:	df 92       	push	r13
 764:	ff 92       	push	r15
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
			/* check the resolution flag */
	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
 76e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gu8_TMU_TimerOvf_Flag>
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	09 f0       	breq	.+2      	; 0x778 <TMU_Dispatcher+0x18>
 776:	73 c0       	rjmp	.+230    	; 0x85e <TMU_Dispatcher+0xfe>
	{
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 778:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 77c:	88 23       	and	r24, r24
 77e:	09 f4       	brne	.+2      	; 0x782 <TMU_Dispatcher+0x22>
 780:	70 c0       	rjmp	.+224    	; 0x862 <__stack+0x3>
 782:	ef e6       	ldi	r30, 0x6F	; 111
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	81 50       	subi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	9c 01       	movw	r18, r24
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	28 1b       	sub	r18, r24
 79c:	39 0b       	sbc	r19, r25
 79e:	21 59       	subi	r18, 0x91	; 145
 7a0:	3f 4f       	sbci	r19, 0xFF	; 255
 7a2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 7a4:	4d ef       	ldi	r20, 0xFD	; 253
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
 7a6:	80 81       	ld	r24, Z
 7a8:	91 81       	ldd	r25, Z+1	; 0x01
 7aa:	89 2b       	or	r24, r25
 7ac:	31 f0       	breq	.+12     	; 0x7ba <TMU_Dispatcher+0x5a>
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;

			}
			else
			{
				gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count++;
 7ae:	84 81       	ldd	r24, Z+4	; 0x04
 7b0:	95 81       	ldd	r25, Z+5	; 0x05
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	95 83       	std	Z+5, r25	; 0x05
 7b6:	84 83       	std	Z+4, r24	; 0x04
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <TMU_Dispatcher+0x5c>
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 7ba:	d4 2f       	mov	r29, r20
 7bc:	37 96       	adiw	r30, 0x07	; 7
	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
	{
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 7be:	2e 17       	cp	r18, r30
 7c0:	3f 07       	cpc	r19, r31
 7c2:	89 f7       	brne	.-30     	; 0x7a6 <TMU_Dispatcher+0x46>
 7c4:	c0 e0       	ldi	r28, 0x00	; 0
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 7c6:	0f 2e       	mov	r0, r31
 7c8:	fd ef       	ldi	r31, 0xFD	; 253
 7ca:	ff 2e       	mov	r15, r31
 7cc:	f0 2d       	mov	r31, r0

		/* Loop through TCB buffer and execute the tasks */
		
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
 7ce:	0c 2f       	mov	r16, r28
 7d0:	10 e0       	ldi	r17, 0x00	; 0
 7d2:	27 e0       	ldi	r18, 0x07	; 7
 7d4:	c2 9f       	mul	r28, r18
 7d6:	f0 01       	movw	r30, r0
 7d8:	11 24       	eor	r1, r1
 7da:	e1 59       	subi	r30, 0x91	; 145
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	01 90       	ld	r0, Z+
 7e0:	f0 81       	ld	r31, Z
 7e2:	e0 2d       	mov	r30, r0
 7e4:	30 97       	sbiw	r30, 0x00	; 0
 7e6:	99 f1       	breq	.+102    	; 0x84e <TMU_Dispatcher+0xee>
			}
			else
			{
				/* if the delay is complete */
				
			if(gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count >= gastrTMU_Buff[u8_Counter].u16_Delay)
 7e8:	d8 01       	movw	r26, r16
 7ea:	aa 0f       	add	r26, r26
 7ec:	bb 1f       	adc	r27, r27
 7ee:	aa 0f       	add	r26, r26
 7f0:	bb 1f       	adc	r27, r27
 7f2:	aa 0f       	add	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	a0 1b       	sub	r26, r16
 7f8:	b1 0b       	sbc	r27, r17
 7fa:	a1 59       	subi	r26, 0x91	; 145
 7fc:	bf 4f       	sbci	r27, 0xFF	; 255
 7fe:	14 96       	adiw	r26, 0x04	; 4
 800:	2d 91       	ld	r18, X+
 802:	3c 91       	ld	r19, X
 804:	15 97       	sbiw	r26, 0x05	; 5
 806:	12 96       	adiw	r26, 0x02	; 2
 808:	8d 91       	ld	r24, X+
 80a:	9c 91       	ld	r25, X
 80c:	13 97       	sbiw	r26, 0x03	; 3
 80e:	28 17       	cp	r18, r24
 810:	39 07       	cpc	r19, r25
 812:	f0 f0       	brcs	.+60     	; 0x850 <TMU_Dispatcher+0xf0>
				{
					gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count = ZERO;
 814:	68 01       	movw	r12, r16
 816:	cc 0c       	add	r12, r12
 818:	dd 1c       	adc	r13, r13
 81a:	cc 0c       	add	r12, r12
 81c:	dd 1c       	adc	r13, r13
 81e:	cc 0c       	add	r12, r12
 820:	dd 1c       	adc	r13, r13
 822:	c6 01       	movw	r24, r12
 824:	80 1b       	sub	r24, r16
 826:	91 0b       	sbc	r25, r17
 828:	dc 01       	movw	r26, r24
 82a:	a1 59       	subi	r26, 0x91	; 145
 82c:	bf 4f       	sbci	r27, 0xFF	; 255
 82e:	6d 01       	movw	r12, r26
 830:	15 96       	adiw	r26, 0x05	; 5
 832:	1c 92       	st	X, r1
 834:	1e 92       	st	-X, r1
 836:	14 97       	sbiw	r26, 0x04	; 4

					gastrTMU_Buff[u8_Counter].gptrTMU_Function();
 838:	09 95       	icall
								
					/* release it if one shot */

					if(gastrTMU_Buff[u8_Counter].u8_Periodicity == ONE_SHOT)
 83a:	f6 01       	movw	r30, r12
 83c:	86 81       	ldd	r24, Z+6	; 0x06
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	39 f4       	brne	.+14     	; 0x850 <TMU_Dispatcher+0xf0>
					{
						TMU_Stop(gastrTMU_Buff[u8_Counter].gptrTMU_Function);
 842:	f6 01       	movw	r30, r12
 844:	80 81       	ld	r24, Z
 846:	91 81       	ldd	r25, Z+1	; 0x01
 848:	0e 94 35 03 	call	0x66a	; 0x66a <TMU_Stop>
 84c:	01 c0       	rjmp	.+2      	; 0x850 <TMU_Dispatcher+0xf0>
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 84e:	df 2d       	mov	r29, r15
		}


		/* Loop through TCB buffer and execute the tasks */
		
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 850:	cf 5f       	subi	r28, 0xFF	; 255
 852:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 856:	c8 17       	cp	r28, r24
 858:	08 f4       	brcc	.+2      	; 0x85c <TMU_Dispatcher+0xfc>
 85a:	b9 cf       	rjmp	.-142    	; 0x7ce <TMU_Dispatcher+0x6e>
 85c:	03 c0       	rjmp	.+6      	; 0x864 <__stack+0x5>
ERROR_STATUS TMU_Dispatcher(void)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 85e:	d0 e0       	ldi	r29, 0x00	; 0
 860:	01 c0       	rjmp	.+2      	; 0x864 <__stack+0x5>
	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
	{
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 862:	d0 e0       	ldi	r29, 0x00	; 0
	else
	{
		/*u8_status = E_NOK;*/
	}
	return u8_status;
}
 864:	8d 2f       	mov	r24, r29
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	df 90       	pop	r13
 872:	cf 90       	pop	r12
 874:	08 95       	ret

00000876 <__tablejump2__>:
 876:	ee 0f       	add	r30, r30
 878:	ff 1f       	adc	r31, r31
 87a:	05 90       	lpm	r0, Z+
 87c:	f4 91       	lpm	r31, Z
 87e:	e0 2d       	mov	r30, r0
 880:	09 94       	ijmp

00000882 <_exit>:
 882:	f8 94       	cli

00000884 <__stop_program>:
 884:	ff cf       	rjmp	.-2      	; 0x884 <__stop_program>
