
DynamicDesign_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800060  00800060  000008be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011af  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a15  00000000  00000000  00001bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d53  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  00003578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e08  00000000  00000000  00003bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000049ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	18 02       	muls	r17, r24
  56:	1c 02       	muls	r17, r28
  58:	21 02       	muls	r18, r17
  5a:	26 02       	muls	r18, r22
  5c:	2b 02       	muls	r18, r27
  5e:	30 02       	muls	r19, r16
  60:	35 02       	muls	r19, r21
  62:	3a 02       	muls	r19, r26

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	ac 3b       	cpi	r26, 0xBC	; 188
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  84:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <DIO_init>:
			*data = HIGH;
		}
		
	} /*end of else */
		return u8_status;
}
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_init+0x6>
  90:	55 c0       	rjmp	.+170    	; 0x13c <DIO_init+0xb0>
  92:	fc 01       	movw	r30, r24
  94:	20 81       	ld	r18, Z
  96:	24 30       	cpi	r18, 0x04	; 4
  98:	08 f0       	brcs	.+2      	; 0x9c <DIO_init+0x10>
  9a:	52 c0       	rjmp	.+164    	; 0x140 <DIO_init+0xb4>
  9c:	21 30       	cpi	r18, 0x01	; 1
  9e:	c1 f0       	breq	.+48     	; 0xd0 <DIO_init+0x44>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_init+0x20>
  a2:	22 30       	cpi	r18, 0x02	; 2
  a4:	39 f1       	breq	.+78     	; 0xf4 <DIO_init+0x68>
  a6:	23 30       	cpi	r18, 0x03	; 3
  a8:	b9 f1       	breq	.+110    	; 0x118 <DIO_init+0x8c>
  aa:	4c c0       	rjmp	.+152    	; 0x144 <DIO_init+0xb8>
  ac:	fc 01       	movw	r30, r24
  ae:	22 81       	ldd	r18, Z+2	; 0x02
  b0:	21 11       	cpse	r18, r1
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <DIO_init+0x36>
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 81       	ldd	r24, Z+1	; 0x01
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	08 95       	ret
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	fc 01       	movw	r30, r24
  c6:	81 81       	ldd	r24, Z+1	; 0x01
  c8:	82 2b       	or	r24, r18
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret
  d0:	fc 01       	movw	r30, r24
  d2:	22 81       	ldd	r18, Z+2	; 0x02
  d4:	21 11       	cpse	r18, r1
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <DIO_init+0x5a>
  d8:	27 b3       	in	r18, 0x17	; 23
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	fc 01       	movw	r30, r24
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	fc 01       	movw	r30, r24
  f6:	22 81       	ldd	r18, Z+2	; 0x02
  f8:	21 11       	cpse	r18, r1
  fa:	07 c0       	rjmp	.+14     	; 0x10a <DIO_init+0x7e>
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	84 bb       	out	0x14, r24	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	24 b3       	in	r18, 0x14	; 20
 10c:	fc 01       	movw	r30, r24
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	82 2b       	or	r24, r18
 112:	84 bb       	out	0x14, r24	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
 118:	fc 01       	movw	r30, r24
 11a:	22 81       	ldd	r18, Z+2	; 0x02
 11c:	21 11       	cpse	r18, r1
 11e:	07 c0       	rjmp	.+14     	; 0x12e <DIO_init+0xa2>
 120:	21 b3       	in	r18, 0x11	; 17
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	81 bb       	out	0x11, r24	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	fc 01       	movw	r30, r24
 132:	81 81       	ldd	r24, Z+1	; 0x01
 134:	82 2b       	or	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret

00000148 <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
		
		if (!(GPIO >= GPIOA && GPIO <= GPIOD)  /* || !(u8_pins >=0 && u8_pins <=7) */)
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	e0 f4       	brcc	.+56     	; 0x184 <DIO_Toggle+0x3c>
			u8_status = E_NOK;
			
			}
			else{
	
	             switch(GPIO){
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	59 f0       	breq	.+22     	; 0x166 <DIO_Toggle+0x1e>
 150:	28 f0       	brcs	.+10     	; 0x15c <DIO_Toggle+0x14>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	69 f0       	breq	.+26     	; 0x170 <DIO_Toggle+0x28>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	81 f0       	breq	.+32     	; 0x17a <DIO_Toggle+0x32>
 15a:	16 c0       	rjmp	.+44     	; 0x188 <DIO_Toggle+0x40>
	             	
	             	case GPIOA:
	             			PORTA_DATA ^= u8_pins;
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	68 27       	eor	r22, r24
 160:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 162:	81 e0       	ldi	r24, 0x01	; 1
	
	             switch(GPIO){
	             	
	             	case GPIOA:
	             			PORTA_DATA ^= u8_pins;
	             			break;
 164:	08 95       	ret
	             	
	             	case GPIOB:
	             			PORTB_DATA ^= u8_pins;
 166:	88 b3       	in	r24, 0x18	; 24
 168:	68 27       	eor	r22, r24
 16a:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 16c:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTA_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOB:
	             			PORTB_DATA ^= u8_pins;
	             			break;
 16e:	08 95       	ret
	             	
	             	case GPIOC:
	             			PORTC_DATA ^= u8_pins;
 170:	85 b3       	in	r24, 0x15	; 21
 172:	68 27       	eor	r22, r24
 174:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 176:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTB_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOC:
	             			PORTC_DATA ^= u8_pins;
	             			break;
 178:	08 95       	ret
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
 17a:	82 b3       	in	r24, 0x12	; 18
 17c:	68 27       	eor	r22, r24
 17e:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 180:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTC_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
	             			break;
 182:	08 95       	ret
	
	ERROR_STATUS u8_status = E_OK;
		
		if (!(GPIO >= GPIOA && GPIO <= GPIOD)  /* || !(u8_pins >=0 && u8_pins <=7) */)
		{
			u8_status = E_NOK;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
	             			break;
	             	default: 
	             			u8_status = E_NOK;
 188:	80 e0       	ldi	r24, 0x00	; 0
	             }
			}/*end of else */
				 
	return u8_status;
}
 18a:	08 95       	ret

0000018c <led0_toggle>:
void led0_toggle(void){
	
	/*PORTA_DATA ^= HIGH;
	//_delay_ms(1000);*/
	
	DIO_Toggle(GPIOB, BIT5);
 18c:	60 e2       	ldi	r22, 0x20	; 32
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_Toggle>
 194:	08 95       	ret

00000196 <led1_toggle>:
void led1_toggle(void){
	
	/*PORTC_DATA ^= HIGH;
	//_delay_ms(1000);
	*/
		DIO_Toggle(GPIOB, BIT6);
 196:	60 e4       	ldi	r22, 0x40	; 64
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_Toggle>
 19e:	08 95       	ret

000001a0 <led2_toggle>:
void led2_toggle(void){
	
	/*PORTD_DATA ^= HIGH;
	//_delay_ms(1000);
	*/
		DIO_Toggle(GPIOB, BIT7);
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_Toggle>
 1a8:	08 95       	ret

000001aa <main>:

}


int main(void)
{	
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <main+0x6>
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
	
	/* normal way */
	
	DIO_Cfg_s Leds ={
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	80 ee       	ldi	r24, 0xE0	; 224
 1bc:	8a 83       	std	Y+2, r24	; 0x02
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	8b 83       	std	Y+3, r24	; 0x03
		GPIOB,
		BIT5 |BIT6 |BIT7,
		OUTPUT
	};
	
	DIO_init(&Leds);
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_init>
	
	TMU_Init();
 1ca:	0e 94 bc 02 	call	0x578	; 0x578 <TMU_Init>
	
	/* 	TMU_Start(funcPtr, delay_ms , periodicity) */
	TMU_Start(led0_toggle, 1000, PERIODIC);
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	68 ee       	ldi	r22, 0xE8	; 232
 1d2:	73 e0       	ldi	r23, 0x03	; 3
 1d4:	86 ec       	ldi	r24, 0xC6	; 198
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <TMU_Start>
	TMU_Start(led1_toggle, 500, ONE_SHOT);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	64 ef       	ldi	r22, 0xF4	; 244
 1e0:	71 e0       	ldi	r23, 0x01	; 1
 1e2:	8b ec       	ldi	r24, 0xCB	; 203
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <TMU_Start>
	TMU_Start(led2_toggle, 2000, PERIODIC);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	60 ed       	ldi	r22, 0xD0	; 208
 1ee:	77 e0       	ldi	r23, 0x07	; 7
 1f0:	80 ed       	ldi	r24, 0xD0	; 208
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <TMU_Start>

	/* enable global interrupts */
	sei();
 1f8:	78 94       	sei
	
	while (1)
	{
		//fun();
		
		TMU_Dispatcher();
 1fa:	0e 94 92 03 	call	0x724	; 0x724 <TMU_Dispatcher>
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <main+0x50>

00000200 <Timer_Init>:
	         			u8_status = E_NOK;
	         }
		}/*end of else */
		
	return u8_status;
}
 200:	fc 01       	movw	r30, r24
 202:	89 2b       	or	r24, r25
 204:	09 f4       	brne	.+2      	; 0x208 <Timer_Init+0x8>
 206:	8c c0       	rjmp	.+280    	; 0x320 <Timer_Init+0x120>
 208:	80 81       	ld	r24, Z
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	a9 f1       	breq	.+106    	; 0x278 <Timer_Init+0x78>
 20e:	20 f0       	brcs	.+8      	; 0x218 <Timer_Init+0x18>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	09 f4       	brne	.+2      	; 0x216 <Timer_Init+0x16>
 214:	5b c0       	rjmp	.+182    	; 0x2cc <Timer_Init+0xcc>
 216:	86 c0       	rjmp	.+268    	; 0x324 <Timer_Init+0x124>
 218:	81 81       	ldd	r24, Z+1	; 0x01
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	21 f0       	breq	.+8      	; 0x226 <Timer_Init+0x26>
 21e:	68 f0       	brcs	.+26     	; 0x23a <Timer_Init+0x3a>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	31 f0       	breq	.+12     	; 0x230 <Timer_Init+0x30>
 224:	0f c0       	rjmp	.+30     	; 0x244 <Timer_Init+0x44>
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0b c0       	rjmp	.+22     	; 0x246 <Timer_Init+0x46>
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	06 c0       	rjmp	.+12     	; 0x246 <Timer_Init+0x46>
 23a:	83 81       	ldd	r24, Z+3	; 0x03
 23c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	01 c0       	rjmp	.+2      	; 0x246 <Timer_Init+0x46>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	92 81       	ldd	r25, Z+2	; 0x02
 248:	99 23       	and	r25, r25
 24a:	19 f0       	breq	.+6      	; 0x252 <Timer_Init+0x52>
 24c:	91 30       	cpi	r25, 0x01	; 1
 24e:	29 f0       	breq	.+10     	; 0x25a <Timer_Init+0x5a>
 250:	08 c0       	rjmp	.+16     	; 0x262 <Timer_Init+0x62>
 252:	99 b7       	in	r25, 0x39	; 57
 254:	9e 7f       	andi	r25, 0xFE	; 254
 256:	99 bf       	out	0x39, r25	; 57
 258:	05 c0       	rjmp	.+10     	; 0x264 <Timer_Init+0x64>
 25a:	99 b7       	in	r25, 0x39	; 57
 25c:	91 60       	ori	r25, 0x01	; 1
 25e:	99 bf       	out	0x39, r25	; 57
 260:	01 c0       	rjmp	.+2      	; 0x264 <Timer_Init+0x64>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	24 81       	ldd	r18, Z+4	; 0x04
 266:	35 81       	ldd	r19, Z+5	; 0x05
 268:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
 26c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <gu8_Timer0initFlag>
 276:	08 95       	ret
 278:	81 81       	ldd	r24, Z+1	; 0x01
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	21 f0       	breq	.+8      	; 0x286 <Timer_Init+0x86>
 27e:	68 f0       	brcs	.+26     	; 0x29a <Timer_Init+0x9a>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	31 f0       	breq	.+12     	; 0x290 <Timer_Init+0x90>
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <Timer_Init+0xa4>
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <Timer_Init+0xa6>
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <Timer_Init+0xa6>
 29a:	83 81       	ldd	r24, Z+3	; 0x03
 29c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <Timer_Init+0xa6>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	92 81       	ldd	r25, Z+2	; 0x02
 2a8:	99 23       	and	r25, r25
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <Timer_Init+0xb2>
 2ac:	91 30       	cpi	r25, 0x01	; 1
 2ae:	29 f0       	breq	.+10     	; 0x2ba <Timer_Init+0xba>
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <Timer_Init+0xc2>
 2b2:	99 b7       	in	r25, 0x39	; 57
 2b4:	9b 7f       	andi	r25, 0xFB	; 251
 2b6:	99 bf       	out	0x39, r25	; 57
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <Timer_Init+0xc4>
 2ba:	99 b7       	in	r25, 0x39	; 57
 2bc:	94 60       	ori	r25, 0x04	; 4
 2be:	99 bf       	out	0x39, r25	; 57
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <Timer_Init+0xc4>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <gu8_Timer1initFlag>
 2ca:	08 95       	ret
 2cc:	81 81       	ldd	r24, Z+1	; 0x01
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	21 f0       	breq	.+8      	; 0x2da <Timer_Init+0xda>
 2d2:	68 f0       	brcs	.+26     	; 0x2ee <Timer_Init+0xee>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <Timer_Init+0xe4>
 2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <Timer_Init+0xf8>
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0b c0       	rjmp	.+22     	; 0x2fa <Timer_Init+0xfa>
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <Timer_Init+0xfa>
 2ee:	83 81       	ldd	r24, Z+3	; 0x03
 2f0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <Timer_Init+0xfa>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	92 81       	ldd	r25, Z+2	; 0x02
 2fc:	99 23       	and	r25, r25
 2fe:	19 f0       	breq	.+6      	; 0x306 <Timer_Init+0x106>
 300:	91 30       	cpi	r25, 0x01	; 1
 302:	29 f0       	breq	.+10     	; 0x30e <Timer_Init+0x10e>
 304:	08 c0       	rjmp	.+16     	; 0x316 <Timer_Init+0x116>
 306:	99 b7       	in	r25, 0x39	; 57
 308:	9f 7b       	andi	r25, 0xBF	; 191
 30a:	99 bf       	out	0x39, r25	; 57
 30c:	05 c0       	rjmp	.+10     	; 0x318 <Timer_Init+0x118>
 30e:	99 b7       	in	r25, 0x39	; 57
 310:	90 64       	ori	r25, 0x40	; 64
 312:	99 bf       	out	0x39, r25	; 57
 314:	01 c0       	rjmp	.+2      	; 0x318 <Timer_Init+0x118>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu8_Timer2initFlag>
 31e:	08 95       	ret
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret

00000328 <Timer_Start>:
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	d9 f1       	breq	.+118    	; 0x3a2 <Timer_Start+0x7a>
 32c:	20 f0       	brcs	.+8      	; 0x336 <Timer_Start+0xe>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	09 f4       	brne	.+2      	; 0x334 <Timer_Start+0xc>
 332:	6e c0       	rjmp	.+220    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 334:	a7 c0       	rjmp	.+334    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 336:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0initFlag>
 33a:	88 23       	and	r24, r24
 33c:	09 f4       	brne	.+2      	; 0x340 <Timer_Start+0x18>
 33e:	a4 c0       	rjmp	.+328    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 340:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	b1 f0       	breq	.+44     	; 0x374 <Timer_Start+0x4c>
 348:	28 f4       	brcc	.+10     	; 0x354 <Timer_Start+0x2c>
 34a:	88 23       	and	r24, r24
 34c:	51 f0       	breq	.+20     	; 0x362 <Timer_Start+0x3a>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	61 f0       	breq	.+24     	; 0x36a <Timer_Start+0x42>
 352:	24 c0       	rjmp	.+72     	; 0x39c <Timer_Start+0x74>
 354:	86 30       	cpi	r24, 0x06	; 6
 356:	c1 f0       	breq	.+48     	; 0x388 <Timer_Start+0x60>
 358:	87 30       	cpi	r24, 0x07	; 7
 35a:	d9 f0       	breq	.+54     	; 0x392 <Timer_Start+0x6a>
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	f1 f4       	brne	.+60     	; 0x39c <Timer_Start+0x74>
 360:	0e c0       	rjmp	.+28     	; 0x37e <Timer_Start+0x56>
 362:	83 b7       	in	r24, 0x33	; 51
 364:	83 bf       	out	0x33, r24	; 51
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	1a c0       	rjmp	.+52     	; 0x39e <Timer_Start+0x76>
 36a:	83 b7       	in	r24, 0x33	; 51
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	83 bf       	out	0x33, r24	; 51
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	15 c0       	rjmp	.+42     	; 0x39e <Timer_Start+0x76>
 374:	83 b7       	in	r24, 0x33	; 51
 376:	82 60       	ori	r24, 0x02	; 2
 378:	83 bf       	out	0x33, r24	; 51
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	10 c0       	rjmp	.+32     	; 0x39e <Timer_Start+0x76>
 37e:	83 b7       	in	r24, 0x33	; 51
 380:	83 60       	ori	r24, 0x03	; 3
 382:	83 bf       	out	0x33, r24	; 51
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0b c0       	rjmp	.+22     	; 0x39e <Timer_Start+0x76>
 388:	83 b7       	in	r24, 0x33	; 51
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	83 bf       	out	0x33, r24	; 51
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	06 c0       	rjmp	.+12     	; 0x39e <Timer_Start+0x76>
 392:	83 b7       	in	r24, 0x33	; 51
 394:	85 60       	ori	r24, 0x05	; 5
 396:	83 bf       	out	0x33, r24	; 51
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	01 c0       	rjmp	.+2      	; 0x39e <Timer_Start+0x76>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	62 bf       	out	0x32, r22	; 50
 3a0:	08 95       	ret
 3a2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1initFlag>
 3a6:	88 23       	and	r24, r24
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Timer_Start+0x84>
 3aa:	70 c0       	rjmp	.+224    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3ac:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	b1 f0       	breq	.+44     	; 0x3e0 <Timer_Start+0xb8>
 3b4:	28 f4       	brcc	.+10     	; 0x3c0 <Timer_Start+0x98>
 3b6:	88 23       	and	r24, r24
 3b8:	51 f0       	breq	.+20     	; 0x3ce <Timer_Start+0xa6>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	61 f0       	breq	.+24     	; 0x3d6 <Timer_Start+0xae>
 3be:	24 c0       	rjmp	.+72     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3c0:	86 30       	cpi	r24, 0x06	; 6
 3c2:	c1 f0       	breq	.+48     	; 0x3f4 <Timer_Start+0xcc>
 3c4:	87 30       	cpi	r24, 0x07	; 7
 3c6:	d9 f0       	breq	.+54     	; 0x3fe <Timer_Start+0xd6>
 3c8:	84 30       	cpi	r24, 0x04	; 4
 3ca:	f1 f4       	brne	.+60     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <Timer_Start+0xc2>
 3ce:	8e b5       	in	r24, 0x2e	; 46
 3d0:	8e bd       	out	0x2e, r24	; 46
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	1a c0       	rjmp	.+52     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d6:	8e b5       	in	r24, 0x2e	; 46
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	8e bd       	out	0x2e, r24	; 46
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	15 c0       	rjmp	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e0:	8e b5       	in	r24, 0x2e	; 46
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	8e bd       	out	0x2e, r24	; 46
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	10 c0       	rjmp	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ea:	8e b5       	in	r24, 0x2e	; 46
 3ec:	83 60       	ori	r24, 0x03	; 3
 3ee:	8e bd       	out	0x2e, r24	; 46
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0b c0       	rjmp	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f4:	8e b5       	in	r24, 0x2e	; 46
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	8e bd       	out	0x2e, r24	; 46
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fe:	8e b5       	in	r24, 0x2e	; 46
 400:	85 60       	ori	r24, 0x05	; 5
 402:	8e bd       	out	0x2e, r24	; 46
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	7d bd       	out	0x2d, r23	; 45
 40c:	6c bd       	out	0x2c, r22	; 44
 40e:	08 95       	ret
 410:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2initFlag>
 414:	88 23       	and	r24, r24
 416:	e1 f1       	breq	.+120    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 418:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 41c:	8e 2f       	mov	r24, r30
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	88 30       	cpi	r24, 0x08	; 8
 422:	91 05       	cpc	r25, r1
 424:	60 f5       	brcc	.+88     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 426:	fc 01       	movw	r30, r24
 428:	e6 5d       	subi	r30, 0xD6	; 214
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__tablejump2__>
 430:	85 b5       	in	r24, 0x25	; 37
 432:	85 bd       	out	0x25, r24	; 37
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	24 c0       	rjmp	.+72     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 438:	85 b5       	in	r24, 0x25	; 37
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	85 bd       	out	0x25, r24	; 37
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	1f c0       	rjmp	.+62     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 442:	85 b5       	in	r24, 0x25	; 37
 444:	82 60       	ori	r24, 0x02	; 2
 446:	85 bd       	out	0x25, r24	; 37
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	1a c0       	rjmp	.+52     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	83 60       	ori	r24, 0x03	; 3
 450:	85 bd       	out	0x25, r24	; 37
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	15 c0       	rjmp	.+42     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 456:	85 b5       	in	r24, 0x25	; 37
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	85 bd       	out	0x25, r24	; 37
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	10 c0       	rjmp	.+32     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 460:	85 b5       	in	r24, 0x25	; 37
 462:	85 60       	ori	r24, 0x05	; 5
 464:	85 bd       	out	0x25, r24	; 37
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0b c0       	rjmp	.+22     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 46a:	85 b5       	in	r24, 0x25	; 37
 46c:	86 60       	ori	r24, 0x06	; 6
 46e:	85 bd       	out	0x25, r24	; 37
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 474:	85 b5       	in	r24, 0x25	; 37
 476:	87 60       	ori	r24, 0x07	; 7
 478:	85 bd       	out	0x25, r24	; 37
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	01 c0       	rjmp	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	64 bd       	out	0x24, r22	; 36
 482:	08 95       	ret
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	08 95       	ret
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	08 95       	ret

00000494 <Timer_Stop>:
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	89 f0       	breq	.+34     	; 0x4ba <Timer_Stop+0x26>
 498:	18 f0       	brcs	.+6      	; 0x4a0 <Timer_Stop+0xc>
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	d9 f0       	breq	.+54     	; 0x4d4 <Timer_Stop+0x40>
 49e:	27 c0       	rjmp	.+78     	; 0x4ee <Timer_Stop+0x5a>
 4a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0initFlag>
 4a4:	88 23       	and	r24, r24
 4a6:	29 f1       	breq	.+74     	; 0x4f2 <Timer_Stop+0x5e>
 4a8:	83 b7       	in	r24, 0x33	; 51
 4aa:	13 be       	out	0x33, r1	; 51
 4ac:	88 b7       	in	r24, 0x38	; 56
 4ae:	81 60       	ori	r24, 0x01	; 1
 4b0:	88 bf       	out	0x38, r24	; 56
 4b2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <gu8_Timer0initFlag>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret
 4ba:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1initFlag>
 4be:	88 23       	and	r24, r24
 4c0:	d1 f0       	breq	.+52     	; 0x4f6 <Timer_Stop+0x62>
 4c2:	8e b5       	in	r24, 0x2e	; 46
 4c4:	1e bc       	out	0x2e, r1	; 46
 4c6:	88 b7       	in	r24, 0x38	; 56
 4c8:	84 60       	ori	r24, 0x04	; 4
 4ca:	88 bf       	out	0x38, r24	; 56
 4cc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <gu8_Timer1initFlag>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2initFlag>
 4d8:	88 23       	and	r24, r24
 4da:	79 f0       	breq	.+30     	; 0x4fa <Timer_Stop+0x66>
 4dc:	85 b5       	in	r24, 0x25	; 37
 4de:	15 bc       	out	0x25, r1	; 37
 4e0:	88 b7       	in	r24, 0x38	; 56
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	88 bf       	out	0x38, r24	; 56
 4e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <gu8_Timer2initFlag>
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	08 95       	ret
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	08 95       	ret
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret

000004fe <__vector_11>:




ISR(TIMER0_OVF_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
	/* Increment overflow counter */
	Timer_OVF_CBK_Ptr[0]();
 520:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 524:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 528:	09 95       	icall
	//PORTC_DATA ^= HIGH;
}
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <TMU_TimerOvf_CBK>:
			gsu8_TMUInitStatus = NOT_INITIALIZED;
			
		}
	
	return u8_status;
}
 54c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gu8_OvfCounter>
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gu8_OvfCounter>
 556:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gu8_OvfCounter>
 55a:	8a 30       	cpi	r24, 0x0A	; 10
 55c:	29 f4       	brne	.+10     	; 0x568 <TMU_TimerOvf_CBK+0x1c>
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu8_TMU_TimerOvf_Flag>
 564:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <gu8_OvfCounter>
 568:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <gu16_PRELOAD>
 56c:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <gu16_PRELOAD+0x1>
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 94 01 	call	0x328	; 0x328 <Timer_Start>
 576:	08 95       	ret

00000578 <TMU_Init>:
 578:	cf 93       	push	r28
 57a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gsu8_TMUInitStatus>
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	29 f1       	breq	.+74     	; 0x5cc <TMU_Init+0x54>
 582:	ef e6       	ldi	r30, 0x6F	; 111
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	85 eb       	ldi	r24, 0xB5	; 181
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	11 82       	std	Z+1, r1	; 0x01
 58c:	10 82       	st	Z, r1
 58e:	13 82       	std	Z+3, r1	; 0x03
 590:	12 82       	std	Z+2, r1	; 0x02
 592:	16 82       	std	Z+6, r1	; 0x06
 594:	37 96       	adiw	r30, 0x07	; 7
 596:	e8 17       	cp	r30, r24
 598:	f9 07       	cpc	r31, r25
 59a:	b9 f7       	brne	.-18     	; 0x58a <TMU_Init+0x12>
 59c:	e6 eb       	ldi	r30, 0xB6	; 182
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	10 82       	st	Z, r1
 5a2:	84 e0       	ldi	r24, 0x04	; 4
 5a4:	83 83       	std	Z+3, r24	; 0x03
 5a6:	86 e0       	ldi	r24, 0x06	; 6
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <gu16_PRELOAD+0x1>
 5ae:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gu16_PRELOAD>
 5b2:	11 82       	std	Z+1, r1	; 0x01
 5b4:	c1 e0       	ldi	r28, 0x01	; 1
 5b6:	c2 83       	std	Z+2, r28	; 0x02
 5b8:	86 ea       	ldi	r24, 0xA6	; 166
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	95 83       	std	Z+5, r25	; 0x05
 5be:	84 83       	std	Z+4, r24	; 0x04
 5c0:	cf 01       	movw	r24, r30
 5c2:	0e 94 00 01 	call	0x200	; 0x200 <Timer_Init>
 5c6:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <gsu8_TMUInitStatus>
 5ca:	01 c0       	rjmp	.+2      	; 0x5ce <TMU_Init+0x56>
 5cc:	8e ef       	ldi	r24, 0xFE	; 254
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <TMU_Start>:
* @return: ERROR_STATUS status code with error code if one occurred
*/
ERROR_STATUS TMU_Start(gptrTMU_Function_t gptrTMU_Function,
					   u16_Delay_t u16_Delay,
					   uint8_t u8_Periodicity)
{
 5d2:	9c 01       	movw	r18, r24
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
		/* check the module */
	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
 5d4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <gsu8_TMUInitStatus>
 5d8:	99 23       	and	r25, r25
 5da:	19 f1       	breq	.+70     	; 0x622 <TMU_Start+0x50>
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
	}
	else
	{
			/* check the function pointer  */	
		if(NULL == gptrTMU_Function)
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	11 f1       	breq	.+68     	; 0x626 <TMU_Start+0x54>
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
		}
		else
		{
				/* check the buffer is full or not */
			if (gu8_Index == MAX_TASK_COUNT)
 5e2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	01 f1       	breq	.+64     	; 0x62a <TMU_Start+0x58>
			{
				u8_status = TMU_ERROR_BASE + ERROR_FULL_BUFFER;
			}
			else{
			/* add the task to the buffer */
			gastrTMU_Buff[gu8_Index].gptrTMU_Function		= gptrTMU_Function;
 5ea:	97 e0       	ldi	r25, 0x07	; 7
 5ec:	89 9f       	mul	r24, r25
 5ee:	f0 01       	movw	r30, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	e1 59       	subi	r30, 0x91	; 145
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	31 83       	std	Z+1, r19	; 0x01
 5f8:	20 83       	st	Z, r18
			gastrTMU_Buff[gu8_Index].u16_Delay				= u16_Delay;
 5fa:	73 83       	std	Z+3, r23	; 0x03
 5fc:	62 83       	std	Z+2, r22	; 0x02
			gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count  = ZERO;
 5fe:	15 82       	std	Z+5, r1	; 0x05
 600:	14 82       	std	Z+4, r1	; 0x04
			gastrTMU_Buff[gu8_Index].u8_Periodicity         = u8_Periodicity;
 602:	46 83       	std	Z+6, r20	; 0x06

			/*start the timer for the first time */
			
			if(gu8_Index == ZERO)
 604:	81 11       	cpse	r24, r1
 606:	06 c0       	rjmp	.+12     	; 0x614 <TMU_Start+0x42>
			{
				#if  TMU_TIMER_CH0
								
				Timer_Start(TIMER_CH0, gu16_PRELOAD);
 608:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <gu16_PRELOAD>
 60c:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <gu16_PRELOAD+0x1>
 610:	0e 94 94 01 	call	0x328	; 0x328 <Timer_Start>
				#elif  TMU_TIMER_CH2
				Timer_Start(TIMER_CH2, gu16_PRELOAD);
				#endif
			}

			gu8_Index++;
 614:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 618:	8f 5f       	subi	r24, 0xFF	; 255
 61a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_Index>
{
	
	/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
		
		/* check the module */
	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	08 95       	ret
	else
	{
			/* check the function pointer  */	
		if(NULL == gptrTMU_Function)
		{
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 626:	8d ef       	ldi	r24, 0xFD	; 253
 628:	08 95       	ret
		else
		{
				/* check the buffer is full or not */
			if (gu8_Index == MAX_TASK_COUNT)
			{
				u8_status = TMU_ERROR_BASE + ERROR_FULL_BUFFER;
 62a:	8b ef       	ldi	r24, 0xFB	; 251
		} /* end of else */
	}
  } /* end of outer else */

	return u8_status;
}
 62c:	08 95       	ret

0000062e <TMU_Stop>:
* @param: gptrTMU_Function: pointer to callback function
* @return: ERROR_STATUS status code with error code if one occurred
*/
 
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
		/* check the module */

	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
 63a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <gsu8_TMUInitStatus>
 63e:	22 23       	and	r18, r18
 640:	09 f4       	brne	.+2      	; 0x644 <TMU_Stop+0x16>
 642:	63 c0       	rjmp	.+198    	; 0x70a <TMU_Stop+0xdc>
	else
	{
		uint8_t u8_Counter;
		/* check the buffer is empty or not */

		if(gu8_Index == ZERO)
 644:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <gu8_Index>
 648:	aa 23       	and	r26, r26
 64a:	09 f4       	brne	.+2      	; 0x64e <TMU_Stop+0x20>
 64c:	59 c0       	rjmp	.+178    	; 0x700 <TMU_Stop+0xd2>
		}
		else
		{
			/* check the function pointer */

			if (NULL == gptrTMU_Function)
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	09 f4       	brne	.+2      	; 0x654 <TMU_Stop+0x26>
 652:	5d c0       	rjmp	.+186    	; 0x70e <TMU_Stop+0xe0>
 654:	ef e6       	ldi	r30, 0x6F	; 111
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	45 eb       	ldi	r20, 0xB5	; 181
 65a:	50 e0       	ldi	r21, 0x00	; 0
			else
			{
					/* loop to find the task  */
			for(u8_Counter = ZERO; u8_Counter < MAX_TASK_COUNT; u8_Counter++)
				{
					if(gastrTMU_Buff[u8_Counter].gptrTMU_Function == gptrTMU_Function)
 65c:	20 81       	ld	r18, Z
 65e:	31 81       	ldd	r19, Z+1	; 0x01
 660:	82 17       	cp	r24, r18
 662:	93 07       	cpc	r25, r19
 664:	09 f0       	breq	.+2      	; 0x668 <TMU_Stop+0x3a>
 666:	41 c0       	rjmp	.+130    	; 0x6ea <TMU_Stop+0xbc>
					{
					/* Check if one task exist or full */
					if((gu8_Index == 1) || (gu8_Index == MAX_TASK_COUNT))
 668:	a1 30       	cpi	r26, 0x01	; 1
 66a:	11 f0       	breq	.+4      	; 0x670 <TMU_Stop+0x42>
 66c:	aa 30       	cpi	r26, 0x0A	; 10
 66e:	79 f4       	brne	.+30     	; 0x68e <TMU_Stop+0x60>
	#endif
}

static void TMU_ClearTask(uint8_t u8_index){
	
	  gastrTMU_Buff[gu8_Index].gptrTMU_Function			= NULL;
 670:	27 e0       	ldi	r18, 0x07	; 7
 672:	a2 9f       	mul	r26, r18
 674:	e0 01       	movw	r28, r0
 676:	11 24       	eor	r1, r1
 678:	c1 59       	subi	r28, 0x91	; 145
 67a:	df 4f       	sbci	r29, 0xFF	; 255
 67c:	19 82       	std	Y+1, r1	; 0x01
 67e:	18 82       	st	Y, r1
	  gastrTMU_Buff[gu8_Index].u16_Delay				= ZERO;
 680:	1b 82       	std	Y+3, r1	; 0x03
 682:	1a 82       	std	Y+2, r1	; 0x02
	  gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count    = ZERO;
 684:	1d 82       	std	Y+5, r1	; 0x05
 686:	1c 82       	std	Y+4, r1	; 0x04
	  gastrTMU_Buff[gu8_Index].u8_Periodicity			= ZERO;
 688:	1e 82       	std	Y+6, r1	; 0x06
					{
					/* Check if one task exist or full */
					if((gu8_Index == 1) || (gu8_Index == MAX_TASK_COUNT))
						{
						TMU_ClearTask(gu8_Index);
						gu8_Index--;
 68a:	a1 50       	subi	r26, 0x01	; 1
 68c:	2e c0       	rjmp	.+92     	; 0x6ea <TMU_Stop+0xbc>
						}
						else
						{
						TMU_ShiftTasks(u8_Counter , (gu8_Index-1));
 68e:	6f ef       	ldi	r22, 0xFF	; 255
 690:	6a 0f       	add	r22, r26
}

static void TMU_ShiftTasks(uint8_t newIndex, uint8_t oldIndex){
	
	
	  gastrTMU_Buff[newIndex].gptrTMU_Function		= gastrTMU_Buff[oldIndex].gptrTMU_Function;
 692:	77 e0       	ldi	r23, 0x07	; 7
 694:	67 9f       	mul	r22, r23
 696:	90 01       	movw	r18, r0
 698:	11 24       	eor	r1, r1
 69a:	21 59       	subi	r18, 0x91	; 145
 69c:	3f 4f       	sbci	r19, 0xFF	; 255
 69e:	e9 01       	movw	r28, r18
 6a0:	08 81       	ld	r16, Y
 6a2:	19 81       	ldd	r17, Y+1	; 0x01
 6a4:	11 83       	std	Z+1, r17	; 0x01
 6a6:	00 83       	st	Z, r16
	  gastrTMU_Buff[newIndex].u16_Delay				= gastrTMU_Buff[oldIndex].u16_Delay;
 6a8:	e9 01       	movw	r28, r18
 6aa:	0a 81       	ldd	r16, Y+2	; 0x02
 6ac:	1b 81       	ldd	r17, Y+3	; 0x03
 6ae:	13 83       	std	Z+3, r17	; 0x03
 6b0:	02 83       	std	Z+2, r16	; 0x02
	  gastrTMU_Buff[newIndex].u16_MilliSecond_Count = gastrTMU_Buff[oldIndex].u16_MilliSecond_Count;
 6b2:	e9 01       	movw	r28, r18
 6b4:	0c 81       	ldd	r16, Y+4	; 0x04
 6b6:	1d 81       	ldd	r17, Y+5	; 0x05
 6b8:	15 83       	std	Z+5, r17	; 0x05
 6ba:	04 83       	std	Z+4, r16	; 0x04
	  gastrTMU_Buff[newIndex].u8_Periodicity		= gastrTMU_Buff[oldIndex].u8_Periodicity;
 6bc:	e9 01       	movw	r28, r18
 6be:	2e 81       	ldd	r18, Y+6	; 0x06
 6c0:	26 83       	std	Z+6, r18	; 0x06
	#endif
}

static void TMU_ClearTask(uint8_t u8_index){
	
	  gastrTMU_Buff[gu8_Index].gptrTMU_Function			= NULL;
 6c2:	d7 e0       	ldi	r29, 0x07	; 7
 6c4:	ad 9f       	mul	r26, r29
 6c6:	d0 01       	movw	r26, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	a1 59       	subi	r26, 0x91	; 145
 6cc:	bf 4f       	sbci	r27, 0xFF	; 255
 6ce:	11 96       	adiw	r26, 0x01	; 1
 6d0:	1c 92       	st	X, r1
 6d2:	1e 92       	st	-X, r1
	  gastrTMU_Buff[gu8_Index].u16_Delay				= ZERO;
 6d4:	13 96       	adiw	r26, 0x03	; 3
 6d6:	1c 92       	st	X, r1
 6d8:	1e 92       	st	-X, r1
 6da:	12 97       	sbiw	r26, 0x02	; 2
	  gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count    = ZERO;
 6dc:	15 96       	adiw	r26, 0x05	; 5
 6de:	1c 92       	st	X, r1
 6e0:	1e 92       	st	-X, r1
 6e2:	14 97       	sbiw	r26, 0x04	; 4
	  gastrTMU_Buff[gu8_Index].u8_Periodicity			= ZERO;
 6e4:	16 96       	adiw	r26, 0x06	; 6
 6e6:	1c 92       	st	X, r1
						else
						{
						TMU_ShiftTasks(u8_Counter , (gu8_Index-1));

						TMU_ClearTask((gu8_Index-1));
						gu8_Index--;
 6e8:	a6 2f       	mov	r26, r22
 6ea:	37 96       	adiw	r30, 0x07	; 7
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
			}
			else
			{
					/* loop to find the task  */
			for(u8_Counter = ZERO; u8_Counter < MAX_TASK_COUNT; u8_Counter++)
 6ec:	e4 17       	cp	r30, r20
 6ee:	f5 07       	cpc	r31, r21
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <TMU_Stop+0xc6>
 6f2:	b4 cf       	rjmp	.-152    	; 0x65c <TMU_Stop+0x2e>
 6f4:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <gu8_Index>
		  }
		}

		/*  if buffer is empty so stop the timer */
		
		if(gu8_Index == ZERO)
 6f8:	a1 11       	cpse	r26, r1
 6fa:	0b c0       	rjmp	.+22     	; 0x712 <TMU_Stop+0xe4>
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
 6fe:	01 c0       	rjmp	.+2      	; 0x702 <TMU_Stop+0xd4>
		uint8_t u8_Counter;
		/* check the buffer is empty or not */

		if(gu8_Index == ZERO)
		{
			u8_status = TMU_ERROR_BASE + ERROR_EMPTY_BUFFER;
 700:	cc ef       	ldi	r28, 0xFC	; 252
		/*  if buffer is empty so stop the timer */
		
		if(gu8_Index == ZERO)
		{
			#if  TMU_TIMER_CH0
			Timer_Stop(TIMER_CH0);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	0e 94 4a 02 	call	0x494	; 0x494 <Timer_Stop>
 708:	05 c0       	rjmp	.+10     	; 0x714 <TMU_Stop+0xe6>
		
		/* check the module */

	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
 70a:	cf ef       	ldi	r28, 0xFF	; 255
 70c:	03 c0       	rjmp	.+6      	; 0x714 <TMU_Stop+0xe6>
		{
			/* check the function pointer */

			if (NULL == gptrTMU_Function)
			{
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 70e:	cd ef       	ldi	r28, 0xFD	; 253
 710:	01 c0       	rjmp	.+2      	; 0x714 <TMU_Stop+0xe6>
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 712:	c0 e0       	ldi	r28, 0x00	; 0
			Timer_Stop(TIMER_CH2);
			#endif
		}
	}
	return u8_status;
}
 714:	8c 2f       	mov	r24, r28
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	08 95       	ret

00000724 <TMU_Dispatcher>:
* Input : void
* Output: None
* @return: ERROR_STATUS status code with error code if one occurred
*/
ERROR_STATUS TMU_Dispatcher(void)
{
 724:	cf 92       	push	r12
 726:	df 92       	push	r13
 728:	ff 92       	push	r15
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
			/* check the resolution flag */
	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
 732:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <gu8_TMU_TimerOvf_Flag>
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	09 f0       	breq	.+2      	; 0x73c <TMU_Dispatcher+0x18>
 73a:	73 c0       	rjmp	.+230    	; 0x822 <TMU_Dispatcher+0xfe>
	{
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 73c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 740:	88 23       	and	r24, r24
 742:	09 f4       	brne	.+2      	; 0x746 <TMU_Dispatcher+0x22>
 744:	70 c0       	rjmp	.+224    	; 0x826 <TMU_Dispatcher+0x102>
 746:	ef e6       	ldi	r30, 0x6F	; 111
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	81 50       	subi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	9c 01       	movw	r18, r24
 752:	22 0f       	add	r18, r18
 754:	33 1f       	adc	r19, r19
 756:	22 0f       	add	r18, r18
 758:	33 1f       	adc	r19, r19
 75a:	22 0f       	add	r18, r18
 75c:	33 1f       	adc	r19, r19
 75e:	28 1b       	sub	r18, r24
 760:	39 0b       	sbc	r19, r25
 762:	21 59       	subi	r18, 0x91	; 145
 764:	3f 4f       	sbci	r19, 0xFF	; 255
 766:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 768:	4d ef       	ldi	r20, 0xFD	; 253
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
 76a:	80 81       	ld	r24, Z
 76c:	91 81       	ldd	r25, Z+1	; 0x01
 76e:	89 2b       	or	r24, r25
 770:	31 f0       	breq	.+12     	; 0x77e <TMU_Dispatcher+0x5a>
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;

			}
			else
			{
				gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count++;
 772:	84 81       	ldd	r24, Z+4	; 0x04
 774:	95 81       	ldd	r25, Z+5	; 0x05
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	95 83       	std	Z+5, r25	; 0x05
 77a:	84 83       	std	Z+4, r24	; 0x04
 77c:	01 c0       	rjmp	.+2      	; 0x780 <TMU_Dispatcher+0x5c>
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 77e:	d4 2f       	mov	r29, r20
 780:	37 96       	adiw	r30, 0x07	; 7
	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
	{
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 782:	2e 17       	cp	r18, r30
 784:	3f 07       	cpc	r19, r31
 786:	89 f7       	brne	.-30     	; 0x76a <TMU_Dispatcher+0x46>
 788:	c0 e0       	ldi	r28, 0x00	; 0
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 78a:	0f 2e       	mov	r0, r31
 78c:	fd ef       	ldi	r31, 0xFD	; 253
 78e:	ff 2e       	mov	r15, r31
 790:	f0 2d       	mov	r31, r0

		/* Loop through TCB buffer and execute the tasks */
		
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
 792:	0c 2f       	mov	r16, r28
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	27 e0       	ldi	r18, 0x07	; 7
 798:	c2 9f       	mul	r28, r18
 79a:	f0 01       	movw	r30, r0
 79c:	11 24       	eor	r1, r1
 79e:	e1 59       	subi	r30, 0x91	; 145
 7a0:	ff 4f       	sbci	r31, 0xFF	; 255
 7a2:	01 90       	ld	r0, Z+
 7a4:	f0 81       	ld	r31, Z
 7a6:	e0 2d       	mov	r30, r0
 7a8:	30 97       	sbiw	r30, 0x00	; 0
 7aa:	99 f1       	breq	.+102    	; 0x812 <TMU_Dispatcher+0xee>
			}
			else
			{
				/* if the delay is complete */
				
			if(gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count >= gastrTMU_Buff[u8_Counter].u16_Delay)
 7ac:	d8 01       	movw	r26, r16
 7ae:	aa 0f       	add	r26, r26
 7b0:	bb 1f       	adc	r27, r27
 7b2:	aa 0f       	add	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	aa 0f       	add	r26, r26
 7b8:	bb 1f       	adc	r27, r27
 7ba:	a0 1b       	sub	r26, r16
 7bc:	b1 0b       	sbc	r27, r17
 7be:	a1 59       	subi	r26, 0x91	; 145
 7c0:	bf 4f       	sbci	r27, 0xFF	; 255
 7c2:	14 96       	adiw	r26, 0x04	; 4
 7c4:	2d 91       	ld	r18, X+
 7c6:	3c 91       	ld	r19, X
 7c8:	15 97       	sbiw	r26, 0x05	; 5
 7ca:	12 96       	adiw	r26, 0x02	; 2
 7cc:	8d 91       	ld	r24, X+
 7ce:	9c 91       	ld	r25, X
 7d0:	13 97       	sbiw	r26, 0x03	; 3
 7d2:	28 17       	cp	r18, r24
 7d4:	39 07       	cpc	r19, r25
 7d6:	f0 f0       	brcs	.+60     	; 0x814 <TMU_Dispatcher+0xf0>
				{
					gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count = ZERO;
 7d8:	68 01       	movw	r12, r16
 7da:	cc 0c       	add	r12, r12
 7dc:	dd 1c       	adc	r13, r13
 7de:	cc 0c       	add	r12, r12
 7e0:	dd 1c       	adc	r13, r13
 7e2:	cc 0c       	add	r12, r12
 7e4:	dd 1c       	adc	r13, r13
 7e6:	c6 01       	movw	r24, r12
 7e8:	80 1b       	sub	r24, r16
 7ea:	91 0b       	sbc	r25, r17
 7ec:	dc 01       	movw	r26, r24
 7ee:	a1 59       	subi	r26, 0x91	; 145
 7f0:	bf 4f       	sbci	r27, 0xFF	; 255
 7f2:	6d 01       	movw	r12, r26
 7f4:	15 96       	adiw	r26, 0x05	; 5
 7f6:	1c 92       	st	X, r1
 7f8:	1e 92       	st	-X, r1
 7fa:	14 97       	sbiw	r26, 0x04	; 4

					gastrTMU_Buff[u8_Counter].gptrTMU_Function();
 7fc:	09 95       	icall
								
					/* release it if one shot */

					if(gastrTMU_Buff[u8_Counter].u8_Periodicity == ONE_SHOT)
 7fe:	f6 01       	movw	r30, r12
 800:	86 81       	ldd	r24, Z+6	; 0x06
 802:	81 30       	cpi	r24, 0x01	; 1
 804:	39 f4       	brne	.+14     	; 0x814 <TMU_Dispatcher+0xf0>
					{
						TMU_Stop(gastrTMU_Buff[u8_Counter].gptrTMU_Function);
 806:	f6 01       	movw	r30, r12
 808:	80 81       	ld	r24, Z
 80a:	91 81       	ldd	r25, Z+1	; 0x01
 80c:	0e 94 17 03 	call	0x62e	; 0x62e <TMU_Stop>
 810:	01 c0       	rjmp	.+2      	; 0x814 <TMU_Dispatcher+0xf0>
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 812:	df 2d       	mov	r29, r15
		}


		/* Loop through TCB buffer and execute the tasks */
		
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 814:	cf 5f       	subi	r28, 0xFF	; 255
 816:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 81a:	c8 17       	cp	r28, r24
 81c:	08 f4       	brcc	.+2      	; 0x820 <TMU_Dispatcher+0xfc>
 81e:	b9 cf       	rjmp	.-142    	; 0x792 <TMU_Dispatcher+0x6e>
 820:	03 c0       	rjmp	.+6      	; 0x828 <TMU_Dispatcher+0x104>
ERROR_STATUS TMU_Dispatcher(void)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 822:	d0 e0       	ldi	r29, 0x00	; 0
 824:	01 c0       	rjmp	.+2      	; 0x828 <TMU_Dispatcher+0x104>
	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
	{
		uint8_t u8_Counter;
					
					/* loop the buffer of tasks */
		for(u8_Counter = ZERO; u8_Counter < gu8_Index; u8_Counter++)
 826:	d0 e0       	ldi	r29, 0x00	; 0
	else
	{
		/*u8_status = E_NOK;*/
	}
	return u8_status;
}
 828:	8d 2f       	mov	r24, r29
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	df 90       	pop	r13
 836:	cf 90       	pop	r12
 838:	08 95       	ret

0000083a <__tablejump2__>:
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	05 90       	lpm	r0, Z+
 840:	f4 91       	lpm	r31, Z
 842:	e0 2d       	mov	r30, r0
 844:	09 94       	ijmp

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
