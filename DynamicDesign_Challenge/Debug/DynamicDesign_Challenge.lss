
DynamicDesign_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000856  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800060  00800060  000008ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ae  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  00001be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d11  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064a  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e08  00000000  00000000  00003b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000495a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	23 02       	muls	r18, r19
  56:	27 02       	muls	r18, r23
  58:	2c 02       	muls	r18, r28
  5a:	31 02       	muls	r19, r17
  5c:	36 02       	muls	r19, r22
  5e:	3b 02       	muls	r19, r27
  60:	40 02       	muls	r20, r16
  62:	45 02       	muls	r20, r21

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 e5       	ldi	r30, 0x56	; 86
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a0 e6       	ldi	r26, 0x60	; 96
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ac 3b       	cpi	r26, 0xBC	; 188
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  9a:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <DIO_init>:
			*data = HIGH;
		}
		
	} /*end of else */
		return u8_status;
}
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_init+0x6>
  a6:	55 c0       	rjmp	.+170    	; 0x152 <DIO_init+0xb0>
  a8:	fc 01       	movw	r30, r24
  aa:	20 81       	ld	r18, Z
  ac:	24 30       	cpi	r18, 0x04	; 4
  ae:	08 f0       	brcs	.+2      	; 0xb2 <DIO_init+0x10>
  b0:	52 c0       	rjmp	.+164    	; 0x156 <DIO_init+0xb4>
  b2:	21 30       	cpi	r18, 0x01	; 1
  b4:	c1 f0       	breq	.+48     	; 0xe6 <DIO_init+0x44>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <DIO_init+0x20>
  b8:	22 30       	cpi	r18, 0x02	; 2
  ba:	39 f1       	breq	.+78     	; 0x10a <DIO_init+0x68>
  bc:	23 30       	cpi	r18, 0x03	; 3
  be:	b9 f1       	breq	.+110    	; 0x12e <DIO_init+0x8c>
  c0:	4c c0       	rjmp	.+152    	; 0x15a <DIO_init+0xb8>
  c2:	fc 01       	movw	r30, r24
  c4:	22 81       	ldd	r18, Z+2	; 0x02
  c6:	21 11       	cpse	r18, r1
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <DIO_init+0x36>
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 81       	ldd	r24, Z+1	; 0x01
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	fc 01       	movw	r30, r24
  dc:	81 81       	ldd	r24, Z+1	; 0x01
  de:	82 2b       	or	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	fc 01       	movw	r30, r24
  e8:	22 81       	ldd	r18, Z+2	; 0x02
  ea:	21 11       	cpse	r18, r1
  ec:	07 c0       	rjmp	.+14     	; 0xfc <DIO_init+0x5a>
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 81       	ldd	r24, Z+1	; 0x01
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	fc 01       	movw	r30, r24
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	82 2b       	or	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	fc 01       	movw	r30, r24
 10c:	22 81       	ldd	r18, Z+2	; 0x02
 10e:	21 11       	cpse	r18, r1
 110:	07 c0       	rjmp	.+14     	; 0x120 <DIO_init+0x7e>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 81       	ldd	r24, Z+1	; 0x01
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	24 b3       	in	r18, 0x14	; 20
 122:	fc 01       	movw	r30, r24
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	82 2b       	or	r24, r18
 128:	84 bb       	out	0x14, r24	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	fc 01       	movw	r30, r24
 130:	22 81       	ldd	r18, Z+2	; 0x02
 132:	21 11       	cpse	r18, r1
 134:	07 c0       	rjmp	.+14     	; 0x144 <DIO_init+0xa2>
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	81 bb       	out	0x11, r24	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	21 b3       	in	r18, 0x11	; 17
 146:	fc 01       	movw	r30, r24
 148:	81 81       	ldd	r24, Z+1	; 0x01
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret

0000015e <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
		
		if (!(GPIO >= GPIOA && GPIO <= GPIOD)  /* || !(u8_pins >=0 && u8_pins <=7) */)
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	e0 f4       	brcc	.+56     	; 0x19a <DIO_Toggle+0x3c>
			u8_status = E_NOK;
			
			}
			else{
	
	             switch(GPIO){
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	59 f0       	breq	.+22     	; 0x17c <DIO_Toggle+0x1e>
 166:	28 f0       	brcs	.+10     	; 0x172 <DIO_Toggle+0x14>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	69 f0       	breq	.+26     	; 0x186 <DIO_Toggle+0x28>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	81 f0       	breq	.+32     	; 0x190 <DIO_Toggle+0x32>
 170:	16 c0       	rjmp	.+44     	; 0x19e <DIO_Toggle+0x40>
	             	
	             	case GPIOA:
	             			PORTA_DATA ^= u8_pins;
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	68 27       	eor	r22, r24
 176:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
	
	             switch(GPIO){
	             	
	             	case GPIOA:
	             			PORTA_DATA ^= u8_pins;
	             			break;
 17a:	08 95       	ret
	             	
	             	case GPIOB:
	             			PORTB_DATA ^= u8_pins;
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	68 27       	eor	r22, r24
 180:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 182:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTA_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOB:
	             			PORTB_DATA ^= u8_pins;
	             			break;
 184:	08 95       	ret
	             	
	             	case GPIOC:
	             			PORTC_DATA ^= u8_pins;
 186:	85 b3       	in	r24, 0x15	; 21
 188:	68 27       	eor	r22, r24
 18a:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 18c:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTB_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOC:
	             			PORTC_DATA ^= u8_pins;
	             			break;
 18e:	08 95       	ret
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
 190:	82 b3       	in	r24, 0x12	; 18
 192:	68 27       	eor	r22, r24
 194:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t u8_pins){
	
	ERROR_STATUS u8_status = E_OK;
 196:	81 e0       	ldi	r24, 0x01	; 1
	             			PORTC_DATA ^= u8_pins;
	             			break;
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
	             			break;
 198:	08 95       	ret
	
	ERROR_STATUS u8_status = E_OK;
		
		if (!(GPIO >= GPIOA && GPIO <= GPIOD)  /* || !(u8_pins >=0 && u8_pins <=7) */)
		{
			u8_status = E_NOK;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
	             	
	             	case GPIOD:
	             			PORTD_DATA ^= u8_pins;
	             			break;
	             	default: 
	             			u8_status = E_NOK;
 19e:	80 e0       	ldi	r24, 0x00	; 0
	             }
			}/*end of else */
				 
	return u8_status;
}
 1a0:	08 95       	ret

000001a2 <led0_toggle>:
void led0_toggle(void){
	
	/*PORTA_DATA ^= HIGH;
	//_delay_ms(1000);*/
	
	DIO_Toggle(GPIOB, BIT5);
 1a2:	60 e2       	ldi	r22, 0x20	; 32
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_Toggle>
 1aa:	08 95       	ret

000001ac <led1_toggle>:
void led1_toggle(void){
	
	/*PORTC_DATA ^= HIGH;
	//_delay_ms(1000);
	*/
		DIO_Toggle(GPIOB, BIT6);
 1ac:	60 e4       	ldi	r22, 0x40	; 64
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_Toggle>
 1b4:	08 95       	ret

000001b6 <led2_toggle>:
void led2_toggle(void){
	
	/*PORTD_DATA ^= HIGH;
	//_delay_ms(1000);
	*/
		DIO_Toggle(GPIOB, BIT7);
 1b6:	60 e8       	ldi	r22, 0x80	; 128
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_Toggle>
 1be:	08 95       	ret

000001c0 <main>:

}


int main(void)
{	
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <main+0x6>
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	
	/* normal way */
	
	DIO_Cfg_s Leds ={
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	80 ee       	ldi	r24, 0xE0	; 224
 1d2:	8a 83       	std	Y+2, r24	; 0x02
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	8b 83       	std	Y+3, r24	; 0x03
		GPIOB,
		BIT5 |BIT6 |BIT7,
		OUTPUT
	};
	
	DIO_init(&Leds);
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_init>
	
	TMU_Init();
 1e0:	0e 94 c7 02 	call	0x58e	; 0x58e <TMU_Init>
	
	TMU_Start(led0_toggle, 1000, PERIODIC);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	68 ee       	ldi	r22, 0xE8	; 232
 1e8:	73 e0       	ldi	r23, 0x03	; 3
 1ea:	81 ed       	ldi	r24, 0xD1	; 209
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <TMU_Start>
	TMU_Start(led1_toggle, 500, ONE_SHOT);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	64 ef       	ldi	r22, 0xF4	; 244
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	86 ed       	ldi	r24, 0xD6	; 214
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <TMU_Start>
	TMU_Start(led2_toggle, 2000, PERIODIC);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 ed       	ldi	r22, 0xD0	; 208
 204:	77 e0       	ldi	r23, 0x07	; 7
 206:	8b ed       	ldi	r24, 0xDB	; 219
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <TMU_Start>

	sei();
 20e:	78 94       	sei

	
	while (1)
	{
		//fun();
		TMU_Dispatcher();
 210:	0e 94 98 03 	call	0x730	; 0x730 <TMU_Dispatcher>
 214:	fd cf       	rjmp	.-6      	; 0x210 <main+0x50>

00000216 <Timer_Init>:
	         			u8_status = E_NOK;
	         }
		}/*end of else */
		
	return u8_status;
}
 216:	fc 01       	movw	r30, r24
 218:	89 2b       	or	r24, r25
 21a:	09 f4       	brne	.+2      	; 0x21e <Timer_Init+0x8>
 21c:	8c c0       	rjmp	.+280    	; 0x336 <Timer_Init+0x120>
 21e:	80 81       	ld	r24, Z
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	a9 f1       	breq	.+106    	; 0x28e <Timer_Init+0x78>
 224:	20 f0       	brcs	.+8      	; 0x22e <Timer_Init+0x18>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	09 f4       	brne	.+2      	; 0x22c <Timer_Init+0x16>
 22a:	5b c0       	rjmp	.+182    	; 0x2e2 <Timer_Init+0xcc>
 22c:	86 c0       	rjmp	.+268    	; 0x33a <Timer_Init+0x124>
 22e:	81 81       	ldd	r24, Z+1	; 0x01
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	21 f0       	breq	.+8      	; 0x23c <Timer_Init+0x26>
 234:	68 f0       	brcs	.+26     	; 0x250 <Timer_Init+0x3a>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	31 f0       	breq	.+12     	; 0x246 <Timer_Init+0x30>
 23a:	0f c0       	rjmp	.+30     	; 0x25a <Timer_Init+0x44>
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0b c0       	rjmp	.+22     	; 0x25c <Timer_Init+0x46>
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	06 c0       	rjmp	.+12     	; 0x25c <Timer_Init+0x46>
 250:	83 81       	ldd	r24, Z+3	; 0x03
 252:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	01 c0       	rjmp	.+2      	; 0x25c <Timer_Init+0x46>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	92 81       	ldd	r25, Z+2	; 0x02
 25e:	99 23       	and	r25, r25
 260:	19 f0       	breq	.+6      	; 0x268 <Timer_Init+0x52>
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	29 f0       	breq	.+10     	; 0x270 <Timer_Init+0x5a>
 266:	08 c0       	rjmp	.+16     	; 0x278 <Timer_Init+0x62>
 268:	99 b7       	in	r25, 0x39	; 57
 26a:	9e 7f       	andi	r25, 0xFE	; 254
 26c:	99 bf       	out	0x39, r25	; 57
 26e:	05 c0       	rjmp	.+10     	; 0x27a <Timer_Init+0x64>
 270:	99 b7       	in	r25, 0x39	; 57
 272:	91 60       	ori	r25, 0x01	; 1
 274:	99 bf       	out	0x39, r25	; 57
 276:	01 c0       	rjmp	.+2      	; 0x27a <Timer_Init+0x64>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	24 81       	ldd	r18, Z+4	; 0x04
 27c:	35 81       	ldd	r19, Z+5	; 0x05
 27e:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_end+0x1>
 282:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_end>
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <gu8_Timer0initFlag>
 28c:	08 95       	ret
 28e:	81 81       	ldd	r24, Z+1	; 0x01
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	21 f0       	breq	.+8      	; 0x29c <Timer_Init+0x86>
 294:	68 f0       	brcs	.+26     	; 0x2b0 <Timer_Init+0x9a>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	31 f0       	breq	.+12     	; 0x2a6 <Timer_Init+0x90>
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <Timer_Init+0xa4>
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <Timer_Init+0xa6>
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <Timer_Init+0xa6>
 2b0:	83 81       	ldd	r24, Z+3	; 0x03
 2b2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <Timer_Init+0xa6>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	92 81       	ldd	r25, Z+2	; 0x02
 2be:	99 23       	and	r25, r25
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <Timer_Init+0xb2>
 2c2:	91 30       	cpi	r25, 0x01	; 1
 2c4:	29 f0       	breq	.+10     	; 0x2d0 <Timer_Init+0xba>
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <Timer_Init+0xc2>
 2c8:	99 b7       	in	r25, 0x39	; 57
 2ca:	9b 7f       	andi	r25, 0xFB	; 251
 2cc:	99 bf       	out	0x39, r25	; 57
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <Timer_Init+0xc4>
 2d0:	99 b7       	in	r25, 0x39	; 57
 2d2:	94 60       	ori	r25, 0x04	; 4
 2d4:	99 bf       	out	0x39, r25	; 57
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <Timer_Init+0xc4>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <gu8_Timer1initFlag>
 2e0:	08 95       	ret
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <Timer_Init+0xda>
 2e8:	68 f0       	brcs	.+26     	; 0x304 <Timer_Init+0xee>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	31 f0       	breq	.+12     	; 0x2fa <Timer_Init+0xe4>
 2ee:	0f c0       	rjmp	.+30     	; 0x30e <Timer_Init+0xf8>
 2f0:	87 e0       	ldi	r24, 0x07	; 7
 2f2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0b c0       	rjmp	.+22     	; 0x310 <Timer_Init+0xfa>
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	06 c0       	rjmp	.+12     	; 0x310 <Timer_Init+0xfa>
 304:	83 81       	ldd	r24, Z+3	; 0x03
 306:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <gu8_Prescaler>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	01 c0       	rjmp	.+2      	; 0x310 <Timer_Init+0xfa>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	92 81       	ldd	r25, Z+2	; 0x02
 312:	99 23       	and	r25, r25
 314:	19 f0       	breq	.+6      	; 0x31c <Timer_Init+0x106>
 316:	91 30       	cpi	r25, 0x01	; 1
 318:	29 f0       	breq	.+10     	; 0x324 <Timer_Init+0x10e>
 31a:	08 c0       	rjmp	.+16     	; 0x32c <Timer_Init+0x116>
 31c:	99 b7       	in	r25, 0x39	; 57
 31e:	9f 7b       	andi	r25, 0xBF	; 191
 320:	99 bf       	out	0x39, r25	; 57
 322:	05 c0       	rjmp	.+10     	; 0x32e <Timer_Init+0x118>
 324:	99 b7       	in	r25, 0x39	; 57
 326:	90 64       	ori	r25, 0x40	; 64
 328:	99 bf       	out	0x39, r25	; 57
 32a:	01 c0       	rjmp	.+2      	; 0x32e <Timer_Init+0x118>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu8_Timer2initFlag>
 334:	08 95       	ret
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret

0000033e <Timer_Start>:
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	d9 f1       	breq	.+118    	; 0x3b8 <Timer_Start+0x7a>
 342:	20 f0       	brcs	.+8      	; 0x34c <Timer_Start+0xe>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	09 f4       	brne	.+2      	; 0x34a <Timer_Start+0xc>
 348:	6e c0       	rjmp	.+220    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 34a:	a7 c0       	rjmp	.+334    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 34c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0initFlag>
 350:	88 23       	and	r24, r24
 352:	09 f4       	brne	.+2      	; 0x356 <Timer_Start+0x18>
 354:	a4 c0       	rjmp	.+328    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 356:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	b1 f0       	breq	.+44     	; 0x38a <Timer_Start+0x4c>
 35e:	28 f4       	brcc	.+10     	; 0x36a <Timer_Start+0x2c>
 360:	88 23       	and	r24, r24
 362:	51 f0       	breq	.+20     	; 0x378 <Timer_Start+0x3a>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	61 f0       	breq	.+24     	; 0x380 <Timer_Start+0x42>
 368:	24 c0       	rjmp	.+72     	; 0x3b2 <Timer_Start+0x74>
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	c1 f0       	breq	.+48     	; 0x39e <Timer_Start+0x60>
 36e:	87 30       	cpi	r24, 0x07	; 7
 370:	d9 f0       	breq	.+54     	; 0x3a8 <Timer_Start+0x6a>
 372:	84 30       	cpi	r24, 0x04	; 4
 374:	f1 f4       	brne	.+60     	; 0x3b2 <Timer_Start+0x74>
 376:	0e c0       	rjmp	.+28     	; 0x394 <Timer_Start+0x56>
 378:	83 b7       	in	r24, 0x33	; 51
 37a:	83 bf       	out	0x33, r24	; 51
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	1a c0       	rjmp	.+52     	; 0x3b4 <Timer_Start+0x76>
 380:	83 b7       	in	r24, 0x33	; 51
 382:	81 60       	ori	r24, 0x01	; 1
 384:	83 bf       	out	0x33, r24	; 51
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	15 c0       	rjmp	.+42     	; 0x3b4 <Timer_Start+0x76>
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	83 bf       	out	0x33, r24	; 51
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	10 c0       	rjmp	.+32     	; 0x3b4 <Timer_Start+0x76>
 394:	83 b7       	in	r24, 0x33	; 51
 396:	83 60       	ori	r24, 0x03	; 3
 398:	83 bf       	out	0x33, r24	; 51
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0b c0       	rjmp	.+22     	; 0x3b4 <Timer_Start+0x76>
 39e:	83 b7       	in	r24, 0x33	; 51
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	83 bf       	out	0x33, r24	; 51
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <Timer_Start+0x76>
 3a8:	83 b7       	in	r24, 0x33	; 51
 3aa:	85 60       	ori	r24, 0x05	; 5
 3ac:	83 bf       	out	0x33, r24	; 51
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <Timer_Start+0x76>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	62 bf       	out	0x32, r22	; 50
 3b6:	08 95       	ret
 3b8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1initFlag>
 3bc:	88 23       	and	r24, r24
 3be:	09 f4       	brne	.+2      	; 0x3c2 <Timer_Start+0x84>
 3c0:	70 c0       	rjmp	.+224    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3c2:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	b1 f0       	breq	.+44     	; 0x3f6 <Timer_Start+0xb8>
 3ca:	28 f4       	brcc	.+10     	; 0x3d6 <Timer_Start+0x98>
 3cc:	88 23       	and	r24, r24
 3ce:	51 f0       	breq	.+20     	; 0x3e4 <Timer_Start+0xa6>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	61 f0       	breq	.+24     	; 0x3ec <Timer_Start+0xae>
 3d4:	24 c0       	rjmp	.+72     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3d6:	86 30       	cpi	r24, 0x06	; 6
 3d8:	c1 f0       	breq	.+48     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3da:	87 30       	cpi	r24, 0x07	; 7
 3dc:	d9 f0       	breq	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3de:	84 30       	cpi	r24, 0x04	; 4
 3e0:	f1 f4       	brne	.+60     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e4:	8e b5       	in	r24, 0x2e	; 46
 3e6:	8e bd       	out	0x2e, r24	; 46
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	1a c0       	rjmp	.+52     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ec:	8e b5       	in	r24, 0x2e	; 46
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	8e bd       	out	0x2e, r24	; 46
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	15 c0       	rjmp	.+42     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f6:	8e b5       	in	r24, 0x2e	; 46
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	8e bd       	out	0x2e, r24	; 46
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	10 c0       	rjmp	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 400:	8e b5       	in	r24, 0x2e	; 46
 402:	83 60       	ori	r24, 0x03	; 3
 404:	8e bd       	out	0x2e, r24	; 46
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0b c0       	rjmp	.+22     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40a:	8e b5       	in	r24, 0x2e	; 46
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	8e bd       	out	0x2e, r24	; 46
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 414:	8e b5       	in	r24, 0x2e	; 46
 416:	85 60       	ori	r24, 0x05	; 5
 418:	8e bd       	out	0x2e, r24	; 46
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	7d bd       	out	0x2d, r23	; 45
 422:	6c bd       	out	0x2c, r22	; 44
 424:	08 95       	ret
 426:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2initFlag>
 42a:	88 23       	and	r24, r24
 42c:	e1 f1       	breq	.+120    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 42e:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <gu8_Prescaler>
 432:	8e 2f       	mov	r24, r30
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	88 30       	cpi	r24, 0x08	; 8
 438:	91 05       	cpc	r25, r1
 43a:	60 f5       	brcc	.+88     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 43c:	fc 01       	movw	r30, r24
 43e:	e6 5d       	subi	r30, 0xD6	; 214
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
 446:	85 b5       	in	r24, 0x25	; 37
 448:	85 bd       	out	0x25, r24	; 37
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	24 c0       	rjmp	.+72     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 44e:	85 b5       	in	r24, 0x25	; 37
 450:	81 60       	ori	r24, 0x01	; 1
 452:	85 bd       	out	0x25, r24	; 37
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	1f c0       	rjmp	.+62     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 458:	85 b5       	in	r24, 0x25	; 37
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	85 bd       	out	0x25, r24	; 37
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	1a c0       	rjmp	.+52     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 462:	85 b5       	in	r24, 0x25	; 37
 464:	83 60       	ori	r24, 0x03	; 3
 466:	85 bd       	out	0x25, r24	; 37
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	15 c0       	rjmp	.+42     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 46c:	85 b5       	in	r24, 0x25	; 37
 46e:	84 60       	ori	r24, 0x04	; 4
 470:	85 bd       	out	0x25, r24	; 37
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	10 c0       	rjmp	.+32     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 476:	85 b5       	in	r24, 0x25	; 37
 478:	85 60       	ori	r24, 0x05	; 5
 47a:	85 bd       	out	0x25, r24	; 37
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0b c0       	rjmp	.+22     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 480:	85 b5       	in	r24, 0x25	; 37
 482:	86 60       	ori	r24, 0x06	; 6
 484:	85 bd       	out	0x25, r24	; 37
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	06 c0       	rjmp	.+12     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 48a:	85 b5       	in	r24, 0x25	; 37
 48c:	87 60       	ori	r24, 0x07	; 7
 48e:	85 bd       	out	0x25, r24	; 37
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	01 c0       	rjmp	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	64 bd       	out	0x24, r22	; 36
 498:	08 95       	ret
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	08 95       	ret
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	08 95       	ret
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	08 95       	ret
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret

000004aa <Timer_Stop>:
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	89 f0       	breq	.+34     	; 0x4d0 <Timer_Stop+0x26>
 4ae:	18 f0       	brcs	.+6      	; 0x4b6 <Timer_Stop+0xc>
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	d9 f0       	breq	.+54     	; 0x4ea <Timer_Stop+0x40>
 4b4:	27 c0       	rjmp	.+78     	; 0x504 <Timer_Stop+0x5a>
 4b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0initFlag>
 4ba:	88 23       	and	r24, r24
 4bc:	29 f1       	breq	.+74     	; 0x508 <Timer_Stop+0x5e>
 4be:	83 b7       	in	r24, 0x33	; 51
 4c0:	13 be       	out	0x33, r1	; 51
 4c2:	88 b7       	in	r24, 0x38	; 56
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	88 bf       	out	0x38, r24	; 56
 4c8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <gu8_Timer0initFlag>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	08 95       	ret
 4d0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1initFlag>
 4d4:	88 23       	and	r24, r24
 4d6:	d1 f0       	breq	.+52     	; 0x50c <Timer_Stop+0x62>
 4d8:	8e b5       	in	r24, 0x2e	; 46
 4da:	1e bc       	out	0x2e, r1	; 46
 4dc:	88 b7       	in	r24, 0x38	; 56
 4de:	84 60       	ori	r24, 0x04	; 4
 4e0:	88 bf       	out	0x38, r24	; 56
 4e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <gu8_Timer1initFlag>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	08 95       	ret
 4ea:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2initFlag>
 4ee:	88 23       	and	r24, r24
 4f0:	79 f0       	breq	.+30     	; 0x510 <Timer_Stop+0x66>
 4f2:	85 b5       	in	r24, 0x25	; 37
 4f4:	15 bc       	out	0x25, r1	; 37
 4f6:	88 b7       	in	r24, 0x38	; 56
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	88 bf       	out	0x38, r24	; 56
 4fc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <gu8_Timer2initFlag>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 95       	ret
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret

00000514 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	/* Increment overflow counter */
	Timer_OVF_CBK_Ptr[0]();
 536:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_end>
 53a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__data_end+0x1>
 53e:	09 95       	icall
	//PORTC_DATA ^= HIGH;
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <TMU_TimerOvf_CBK>:
			gsu8_TMUInitStatus = NOT_INITIALIZED;
			
		}
	
	return u8_status;
}
 562:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gu8_OvfCounter>
 566:	8f 5f       	subi	r24, 0xFF	; 255
 568:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gu8_OvfCounter>
 56c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gu8_OvfCounter>
 570:	8a 30       	cpi	r24, 0x0A	; 10
 572:	29 f4       	brne	.+10     	; 0x57e <TMU_TimerOvf_CBK+0x1c>
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu8_TMU_TimerOvf_Flag>
 57a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <gu8_OvfCounter>
 57e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <gu16_PRELOAD>
 582:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <gu16_PRELOAD+0x1>
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 9f 01 	call	0x33e	; 0x33e <Timer_Start>
 58c:	08 95       	ret

0000058e <TMU_Init>:
 58e:	cf 93       	push	r28
 590:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gsu8_TMUInitStatus>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	29 f1       	breq	.+74     	; 0x5e2 <TMU_Init+0x54>
 598:	ef e6       	ldi	r30, 0x6F	; 111
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	85 eb       	ldi	r24, 0xB5	; 181
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	11 82       	std	Z+1, r1	; 0x01
 5a2:	10 82       	st	Z, r1
 5a4:	13 82       	std	Z+3, r1	; 0x03
 5a6:	12 82       	std	Z+2, r1	; 0x02
 5a8:	16 82       	std	Z+6, r1	; 0x06
 5aa:	37 96       	adiw	r30, 0x07	; 7
 5ac:	e8 17       	cp	r30, r24
 5ae:	f9 07       	cpc	r31, r25
 5b0:	b9 f7       	brne	.-18     	; 0x5a0 <TMU_Init+0x12>
 5b2:	e6 eb       	ldi	r30, 0xB6	; 182
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	10 82       	st	Z, r1
 5b8:	84 e0       	ldi	r24, 0x04	; 4
 5ba:	83 83       	std	Z+3, r24	; 0x03
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <gu16_PRELOAD+0x1>
 5c4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <gu16_PRELOAD>
 5c8:	11 82       	std	Z+1, r1	; 0x01
 5ca:	c1 e0       	ldi	r28, 0x01	; 1
 5cc:	c2 83       	std	Z+2, r28	; 0x02
 5ce:	81 eb       	ldi	r24, 0xB1	; 177
 5d0:	92 e0       	ldi	r25, 0x02	; 2
 5d2:	95 83       	std	Z+5, r25	; 0x05
 5d4:	84 83       	std	Z+4, r24	; 0x04
 5d6:	cf 01       	movw	r24, r30
 5d8:	0e 94 0b 01 	call	0x216	; 0x216 <Timer_Init>
 5dc:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <gsu8_TMUInitStatus>
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <TMU_Init+0x56>
 5e2:	8e ef       	ldi	r24, 0xFE	; 254
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <TMU_Start>:
* @return: ERROR_STATUS status code with error code if one occurred
*/
ERROR_STATUS TMU_Start(gptrTMU_Function_t gptrTMU_Function,
					   u16_Delay_t u16_Delay,
					   uint8_t u8_Periodicity)
{
 5e8:	9c 01       	movw	r18, r24
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		
		
	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
 5ea:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <gsu8_TMUInitStatus>
 5ee:	99 23       	and	r25, r25
 5f0:	19 f1       	breq	.+70     	; 0x638 <TMU_Start+0x50>
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
	}
	else
	{
		if(NULL == gptrTMU_Function)
 5f2:	21 15       	cp	r18, r1
 5f4:	31 05       	cpc	r19, r1
 5f6:	11 f1       	breq	.+68     	; 0x63c <TMU_Start+0x54>
		{
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
		}
		else
		{
			if (gu8_Index == MAX_TASK_COUNT)
 5f8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 5fc:	8a 30       	cpi	r24, 0x0A	; 10
 5fe:	01 f1       	breq	.+64     	; 0x640 <TMU_Start+0x58>
			{
				u8_status = TMU_ERROR_BASE + ERROR_FULL_BUFFER;
			}
			else{
			/* add the task to the buffer */
			gastrTMU_Buff[gu8_Index].gptrTMU_Function		= gptrTMU_Function;
 600:	97 e0       	ldi	r25, 0x07	; 7
 602:	89 9f       	mul	r24, r25
 604:	f0 01       	movw	r30, r0
 606:	11 24       	eor	r1, r1
 608:	e1 59       	subi	r30, 0x91	; 145
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	31 83       	std	Z+1, r19	; 0x01
 60e:	20 83       	st	Z, r18
			gastrTMU_Buff[gu8_Index].u16_Delay				= u16_Delay;
 610:	73 83       	std	Z+3, r23	; 0x03
 612:	62 83       	std	Z+2, r22	; 0x02
			gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count  = 0;
 614:	15 82       	std	Z+5, r1	; 0x05
 616:	14 82       	std	Z+4, r1	; 0x04
			gastrTMU_Buff[gu8_Index].u8_Periodicity         = u8_Periodicity;
 618:	46 83       	std	Z+6, r20	; 0x06

			/*start the timer for the first time */
			
			if(gu8_Index == 0)
 61a:	81 11       	cpse	r24, r1
 61c:	06 c0       	rjmp	.+12     	; 0x62a <TMU_Start+0x42>
			{
				#if  TMU_TIMER_CH0
								
				Timer_Start(TIMER_CH0, gu16_PRELOAD);
 61e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <gu16_PRELOAD>
 622:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <gu16_PRELOAD+0x1>
 626:	0e 94 9f 01 	call	0x33e	; 0x33e <Timer_Start>
				#elif  TMU_TIMER_CH2
				Timer_Start(TIMER_CH2, gu16_PRELOAD);
				#endif
			}

			gu8_Index++;
 62a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 62e:	8f 5f       	subi	r24, 0xFF	; 255
 630:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_Index>
{
	
	/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	08 95       	ret
		
		
	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	08 95       	ret
	}
	else
	{
		if(NULL == gptrTMU_Function)
		{
			u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 63c:	8d ef       	ldi	r24, 0xFD	; 253
 63e:	08 95       	ret
		}
		else
		{
			if (gu8_Index == MAX_TASK_COUNT)
			{
				u8_status = TMU_ERROR_BASE + ERROR_FULL_BUFFER;
 640:	8b ef       	ldi	r24, 0xFB	; 251
		} /* end of else */
	}
  } /* end of outer else */

	return u8_status;
}
 642:	08 95       	ret

00000644 <TMU_Stop>:
* @param: gptrTMU_Function: pointer to callback function
* @return: ERROR_STATUS status code with error code if one occurred
*/
 
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		

	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
 650:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <gsu8_TMUInitStatus>
 654:	22 23       	and	r18, r18
 656:	09 f4       	brne	.+2      	; 0x65a <TMU_Stop+0x16>
 658:	60 c0       	rjmp	.+192    	; 0x71a <TMU_Stop+0xd6>
	}
	else
	{
		uint8_t u8_Counter;

		if(gu8_Index == 0)
 65a:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <gu8_Index>
 65e:	aa 23       	and	r26, r26
 660:	09 f4       	brne	.+2      	; 0x664 <TMU_Stop+0x20>
 662:	56 c0       	rjmp	.+172    	; 0x710 <TMU_Stop+0xcc>
 664:	ef e6       	ldi	r30, 0x6F	; 111
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	45 eb       	ldi	r20, 0xB5	; 181
 66a:	50 e0       	ldi	r21, 0x00	; 0
		}
		else
		{
			for(u8_Counter = 0; u8_Counter < MAX_TASK_COUNT; u8_Counter++)
			{
				if(gastrTMU_Buff[u8_Counter].gptrTMU_Function == gptrTMU_Function)
 66c:	20 81       	ld	r18, Z
 66e:	31 81       	ldd	r19, Z+1	; 0x01
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	09 f0       	breq	.+2      	; 0x678 <TMU_Stop+0x34>
 676:	41 c0       	rjmp	.+130    	; 0x6fa <TMU_Stop+0xb6>
				{
					/* Check if one task exist or full */
					if((gu8_Index == 1) || (gu8_Index == MAX_TASK_COUNT))
 678:	a1 30       	cpi	r26, 0x01	; 1
 67a:	11 f0       	breq	.+4      	; 0x680 <TMU_Stop+0x3c>
 67c:	aa 30       	cpi	r26, 0x0A	; 10
 67e:	79 f4       	brne	.+30     	; 0x69e <TMU_Stop+0x5a>
	#endif
}

static void TMU_ClearTask(uint8_t u8_index){
	
	  gastrTMU_Buff[gu8_Index].gptrTMU_Function			= NULL;
 680:	27 e0       	ldi	r18, 0x07	; 7
 682:	a2 9f       	mul	r26, r18
 684:	e0 01       	movw	r28, r0
 686:	11 24       	eor	r1, r1
 688:	c1 59       	subi	r28, 0x91	; 145
 68a:	df 4f       	sbci	r29, 0xFF	; 255
 68c:	19 82       	std	Y+1, r1	; 0x01
 68e:	18 82       	st	Y, r1
	  gastrTMU_Buff[gu8_Index].u16_Delay				= 0;
 690:	1b 82       	std	Y+3, r1	; 0x03
 692:	1a 82       	std	Y+2, r1	; 0x02
	  gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count    = 0;
 694:	1d 82       	std	Y+5, r1	; 0x05
 696:	1c 82       	std	Y+4, r1	; 0x04
	  gastrTMU_Buff[gu8_Index].u8_Periodicity			= 0;
 698:	1e 82       	std	Y+6, r1	; 0x06
				{
					/* Check if one task exist or full */
					if((gu8_Index == 1) || (gu8_Index == MAX_TASK_COUNT))
					{
						TMU_ClearTask(gu8_Index);
						gu8_Index--;
 69a:	a1 50       	subi	r26, 0x01	; 1
 69c:	2e c0       	rjmp	.+92     	; 0x6fa <TMU_Stop+0xb6>
					}
					else
					{
						TMU_ShiftTasks(u8_Counter , (gu8_Index-1));
 69e:	6f ef       	ldi	r22, 0xFF	; 255
 6a0:	6a 0f       	add	r22, r26
}

static void TMU_ShiftTasks(uint8_t newIndex, uint8_t oldIndex){
	
	
	  gastrTMU_Buff[newIndex].gptrTMU_Function		= gastrTMU_Buff[oldIndex].gptrTMU_Function;
 6a2:	77 e0       	ldi	r23, 0x07	; 7
 6a4:	67 9f       	mul	r22, r23
 6a6:	90 01       	movw	r18, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	21 59       	subi	r18, 0x91	; 145
 6ac:	3f 4f       	sbci	r19, 0xFF	; 255
 6ae:	e9 01       	movw	r28, r18
 6b0:	08 81       	ld	r16, Y
 6b2:	19 81       	ldd	r17, Y+1	; 0x01
 6b4:	11 83       	std	Z+1, r17	; 0x01
 6b6:	00 83       	st	Z, r16
	  gastrTMU_Buff[newIndex].u16_Delay				= gastrTMU_Buff[oldIndex].u16_Delay;
 6b8:	e9 01       	movw	r28, r18
 6ba:	0a 81       	ldd	r16, Y+2	; 0x02
 6bc:	1b 81       	ldd	r17, Y+3	; 0x03
 6be:	13 83       	std	Z+3, r17	; 0x03
 6c0:	02 83       	std	Z+2, r16	; 0x02
	  gastrTMU_Buff[newIndex].u16_MilliSecond_Count = gastrTMU_Buff[oldIndex].u16_MilliSecond_Count;
 6c2:	e9 01       	movw	r28, r18
 6c4:	0c 81       	ldd	r16, Y+4	; 0x04
 6c6:	1d 81       	ldd	r17, Y+5	; 0x05
 6c8:	15 83       	std	Z+5, r17	; 0x05
 6ca:	04 83       	std	Z+4, r16	; 0x04
	  gastrTMU_Buff[newIndex].u8_Periodicity		= gastrTMU_Buff[oldIndex].u8_Periodicity;
 6cc:	e9 01       	movw	r28, r18
 6ce:	2e 81       	ldd	r18, Y+6	; 0x06
 6d0:	26 83       	std	Z+6, r18	; 0x06
	#endif
}

static void TMU_ClearTask(uint8_t u8_index){
	
	  gastrTMU_Buff[gu8_Index].gptrTMU_Function			= NULL;
 6d2:	d7 e0       	ldi	r29, 0x07	; 7
 6d4:	ad 9f       	mul	r26, r29
 6d6:	d0 01       	movw	r26, r0
 6d8:	11 24       	eor	r1, r1
 6da:	a1 59       	subi	r26, 0x91	; 145
 6dc:	bf 4f       	sbci	r27, 0xFF	; 255
 6de:	11 96       	adiw	r26, 0x01	; 1
 6e0:	1c 92       	st	X, r1
 6e2:	1e 92       	st	-X, r1
	  gastrTMU_Buff[gu8_Index].u16_Delay				= 0;
 6e4:	13 96       	adiw	r26, 0x03	; 3
 6e6:	1c 92       	st	X, r1
 6e8:	1e 92       	st	-X, r1
 6ea:	12 97       	sbiw	r26, 0x02	; 2
	  gastrTMU_Buff[gu8_Index].u16_MilliSecond_Count    = 0;
 6ec:	15 96       	adiw	r26, 0x05	; 5
 6ee:	1c 92       	st	X, r1
 6f0:	1e 92       	st	-X, r1
 6f2:	14 97       	sbiw	r26, 0x04	; 4
	  gastrTMU_Buff[gu8_Index].u8_Periodicity			= 0;
 6f4:	16 96       	adiw	r26, 0x06	; 6
 6f6:	1c 92       	st	X, r1
					else
					{
						TMU_ShiftTasks(u8_Counter , (gu8_Index-1));

						TMU_ClearTask((gu8_Index-1));
						gu8_Index--;
 6f8:	a6 2f       	mov	r26, r22
 6fa:	37 96       	adiw	r30, 0x07	; 7
		{
			u8_status = TMU_ERROR_BASE + ERROR_EMPTY_BUFFER;
		}
		else
		{
			for(u8_Counter = 0; u8_Counter < MAX_TASK_COUNT; u8_Counter++)
 6fc:	e4 17       	cp	r30, r20
 6fe:	f5 07       	cpc	r31, r21
 700:	09 f0       	breq	.+2      	; 0x704 <TMU_Stop+0xc0>
 702:	b4 cf       	rjmp	.-152    	; 0x66c <TMU_Stop+0x28>
 704:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <gu8_Index>
			}
		}

		/*  if buffer is empty so stop the timer */
		
		if(gu8_Index == 0)
 708:	a1 11       	cpse	r26, r1
 70a:	09 c0       	rjmp	.+18     	; 0x71e <TMU_Stop+0xda>
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 70c:	c0 e0       	ldi	r28, 0x00	; 0
 70e:	01 c0       	rjmp	.+2      	; 0x712 <TMU_Stop+0xce>
	{
		uint8_t u8_Counter;

		if(gu8_Index == 0)
		{
			u8_status = TMU_ERROR_BASE + ERROR_EMPTY_BUFFER;
 710:	cc ef       	ldi	r28, 0xFC	; 252
		/*  if buffer is empty so stop the timer */
		
		if(gu8_Index == 0)
		{
			#if  TMU_TIMER_CH0
			Timer_Stop(TIMER_CH0);
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	0e 94 55 02 	call	0x4aa	; 0x4aa <Timer_Stop>
 718:	03 c0       	rjmp	.+6      	; 0x720 <TMU_Stop+0xdc>
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		

	if(gsu8_TMUInitStatus == NOT_INITIALIZED)
	{
		u8_status = TMU_ERROR_BASE + ERROR_NOT_INITIALIZED;
 71a:	cf ef       	ldi	r28, 0xFF	; 255
 71c:	01 c0       	rjmp	.+2      	; 0x720 <TMU_Stop+0xdc>
ERROR_STATUS TMU_Stop(gptrTMU_Function_t gptrTMU_Function)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 71e:	c0 e0       	ldi	r28, 0x00	; 0
			Timer_Stop(TIMER_CH2);
			#endif
		}
	}
	return u8_status;
}
 720:	8c 2f       	mov	r24, r28
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	08 95       	ret

00000730 <TMU_Dispatcher>:
* Input : void
* Output: None
* @return: ERROR_STATUS status code with error code if one occurred
*/
ERROR_STATUS TMU_Dispatcher(void)
{
 730:	cf 92       	push	r12
 732:	df 92       	push	r13
 734:	ff 92       	push	r15
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
		

	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
 73e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gu8_TMU_TimerOvf_Flag>
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	09 f0       	breq	.+2      	; 0x748 <TMU_Dispatcher+0x18>
 746:	73 c0       	rjmp	.+230    	; 0x82e <TMU_Dispatcher+0xfe>
	{
		uint8_t u8_Counter;
			
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
 748:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 74c:	88 23       	and	r24, r24
 74e:	09 f4       	brne	.+2      	; 0x752 <TMU_Dispatcher+0x22>
 750:	70 c0       	rjmp	.+224    	; 0x832 <TMU_Dispatcher+0x102>
 752:	ef e6       	ldi	r30, 0x6F	; 111
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	81 50       	subi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	9c 01       	movw	r18, r24
 75e:	22 0f       	add	r18, r18
 760:	33 1f       	adc	r19, r19
 762:	22 0f       	add	r18, r18
 764:	33 1f       	adc	r19, r19
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	28 1b       	sub	r18, r24
 76c:	39 0b       	sbc	r19, r25
 76e:	21 59       	subi	r18, 0x91	; 145
 770:	3f 4f       	sbci	r19, 0xFF	; 255
 772:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 774:	4d ef       	ldi	r20, 0xFD	; 253
	{
		uint8_t u8_Counter;
			
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
 776:	80 81       	ld	r24, Z
 778:	91 81       	ldd	r25, Z+1	; 0x01
 77a:	89 2b       	or	r24, r25
 77c:	31 f0       	breq	.+12     	; 0x78a <TMU_Dispatcher+0x5a>
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;

			}
			else
			{
				gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count++;
 77e:	84 81       	ldd	r24, Z+4	; 0x04
 780:	95 81       	ldd	r25, Z+5	; 0x05
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	95 83       	std	Z+5, r25	; 0x05
 786:	84 83       	std	Z+4, r24	; 0x04
 788:	01 c0       	rjmp	.+2      	; 0x78c <TMU_Dispatcher+0x5c>
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 78a:	d4 2f       	mov	r29, r20
 78c:	37 96       	adiw	r30, 0x07	; 7

	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
	{
		uint8_t u8_Counter;
			
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
 78e:	2e 17       	cp	r18, r30
 790:	3f 07       	cpc	r19, r31
 792:	89 f7       	brne	.-30     	; 0x776 <TMU_Dispatcher+0x46>
 794:	c0 e0       	ldi	r28, 0x00	; 0
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 796:	0f 2e       	mov	r0, r31
 798:	fd ef       	ldi	r31, 0xFD	; 253
 79a:	ff 2e       	mov	r15, r31
 79c:	f0 2d       	mov	r31, r0

		/* Loop through TCB buffer and execute the tasks */
		
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
 79e:	0c 2f       	mov	r16, r28
 7a0:	10 e0       	ldi	r17, 0x00	; 0
 7a2:	27 e0       	ldi	r18, 0x07	; 7
 7a4:	c2 9f       	mul	r28, r18
 7a6:	f0 01       	movw	r30, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	e1 59       	subi	r30, 0x91	; 145
 7ac:	ff 4f       	sbci	r31, 0xFF	; 255
 7ae:	01 90       	ld	r0, Z+
 7b0:	f0 81       	ld	r31, Z
 7b2:	e0 2d       	mov	r30, r0
 7b4:	30 97       	sbiw	r30, 0x00	; 0
 7b6:	99 f1       	breq	.+102    	; 0x81e <TMU_Dispatcher+0xee>
			}
			else
			{
				/* if the delay is complete */
				
			if(gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count >= gastrTMU_Buff[u8_Counter].u16_Delay)
 7b8:	d8 01       	movw	r26, r16
 7ba:	aa 0f       	add	r26, r26
 7bc:	bb 1f       	adc	r27, r27
 7be:	aa 0f       	add	r26, r26
 7c0:	bb 1f       	adc	r27, r27
 7c2:	aa 0f       	add	r26, r26
 7c4:	bb 1f       	adc	r27, r27
 7c6:	a0 1b       	sub	r26, r16
 7c8:	b1 0b       	sbc	r27, r17
 7ca:	a1 59       	subi	r26, 0x91	; 145
 7cc:	bf 4f       	sbci	r27, 0xFF	; 255
 7ce:	14 96       	adiw	r26, 0x04	; 4
 7d0:	2d 91       	ld	r18, X+
 7d2:	3c 91       	ld	r19, X
 7d4:	15 97       	sbiw	r26, 0x05	; 5
 7d6:	12 96       	adiw	r26, 0x02	; 2
 7d8:	8d 91       	ld	r24, X+
 7da:	9c 91       	ld	r25, X
 7dc:	13 97       	sbiw	r26, 0x03	; 3
 7de:	28 17       	cp	r18, r24
 7e0:	39 07       	cpc	r19, r25
 7e2:	f0 f0       	brcs	.+60     	; 0x820 <TMU_Dispatcher+0xf0>
				{
					gastrTMU_Buff[u8_Counter].u16_MilliSecond_Count = 0;
 7e4:	68 01       	movw	r12, r16
 7e6:	cc 0c       	add	r12, r12
 7e8:	dd 1c       	adc	r13, r13
 7ea:	cc 0c       	add	r12, r12
 7ec:	dd 1c       	adc	r13, r13
 7ee:	cc 0c       	add	r12, r12
 7f0:	dd 1c       	adc	r13, r13
 7f2:	c6 01       	movw	r24, r12
 7f4:	80 1b       	sub	r24, r16
 7f6:	91 0b       	sbc	r25, r17
 7f8:	dc 01       	movw	r26, r24
 7fa:	a1 59       	subi	r26, 0x91	; 145
 7fc:	bf 4f       	sbci	r27, 0xFF	; 255
 7fe:	6d 01       	movw	r12, r26
 800:	15 96       	adiw	r26, 0x05	; 5
 802:	1c 92       	st	X, r1
 804:	1e 92       	st	-X, r1
 806:	14 97       	sbiw	r26, 0x04	; 4

					gastrTMU_Buff[u8_Counter].gptrTMU_Function();
 808:	09 95       	icall
								
					if(gastrTMU_Buff[u8_Counter].u8_Periodicity == ONE_SHOT)
 80a:	f6 01       	movw	r30, r12
 80c:	86 81       	ldd	r24, Z+6	; 0x06
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	39 f4       	brne	.+14     	; 0x820 <TMU_Dispatcher+0xf0>
					{
						TMU_Stop(gastrTMU_Buff[u8_Counter].gptrTMU_Function);
 812:	f6 01       	movw	r30, r12
 814:	80 81       	ld	r24, Z
 816:	91 81       	ldd	r25, Z+1	; 0x01
 818:	0e 94 22 03 	call	0x644	; 0x644 <TMU_Stop>
 81c:	01 c0       	rjmp	.+2      	; 0x820 <TMU_Dispatcher+0xf0>
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
		{
			if(NULL == gastrTMU_Buff[u8_Counter].gptrTMU_Function)
			{
				/* skip for now until making circular buffer */
				u8_status = TMU_ERROR_BASE + ERROR_NULL_POINTER;
 81e:	df 2d       	mov	r29, r15
		}


		/* Loop through TCB buffer and execute the tasks */
		
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
 820:	cf 5f       	subi	r28, 0xFF	; 255
 822:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_Index>
 826:	c8 17       	cp	r28, r24
 828:	08 f4       	brcc	.+2      	; 0x82c <TMU_Dispatcher+0xfc>
 82a:	b9 cf       	rjmp	.-142    	; 0x79e <TMU_Dispatcher+0x6e>
 82c:	03 c0       	rjmp	.+6      	; 0x834 <TMU_Dispatcher+0x104>
ERROR_STATUS TMU_Dispatcher(void)
{
		/*
		ERROR_STATUS u8_status = E_OK;
*/
		ERROR_STATUS u8_status = TMU_ERROR_BASE + NO_ERRORS;
 82e:	d0 e0       	ldi	r29, 0x00	; 0
 830:	01 c0       	rjmp	.+2      	; 0x834 <TMU_Dispatcher+0x104>

	if(gu8_TMU_TimerOvf_Flag == OVF_TRIGGERED)
	{
		uint8_t u8_Counter;
			
		for(u8_Counter = 0; u8_Counter < gu8_Index; u8_Counter++)
 832:	d0 e0       	ldi	r29, 0x00	; 0
	else
	{
		/*u8_status = E_NOK;*/
	}
	return u8_status;
}
 834:	8d 2f       	mov	r24, r29
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	df 90       	pop	r13
 842:	cf 90       	pop	r12
 844:	08 95       	ret

00000846 <__tablejump2__>:
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	05 90       	lpm	r0, Z+
 84c:	f4 91       	lpm	r31, Z
 84e:	e0 2d       	mov	r30, r0
 850:	09 94       	ijmp

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
